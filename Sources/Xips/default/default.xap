////////////////////////////////////////////////////////OBJECTS////////////////////////////////////////////////////////
////////////////////////////////////////////////////////OBJECTS////////////////////////////////////////////////////////

DEF theConfig Config
DEF theHardDrive HardDrive
DEF theGamesMenu TitleMenu
DEF theApplicationsMenu TitleMenu
DEF theEmulatorsMenu TitleMenu
DEF theDashboardsMenu TitleMenu
//DEF theXboxNetwork XboxNetwork
DEF theTranslator Translator

////////////////////////////////////////////////////////OBJECTS////////////////////////////////////////////////////////
////////////////////////////////////////////////////////OBJECTS////////////////////////////////////////////////////////
////HOTFIXES///

////////////////////////////////////////////////////////////////////////////


function AutoLaunchCheck()
{
    	//var a = GetSavedValue("AutoLaunch Media","LaunchOnInsert");
	var a = GetSavedValue("Dashboard Settings","AutoLaunch Media");
    	if(a == "true")
    	{
		AutoLaunch();
	}
	else
	{
		var stra;
		var strb;
		if(theDiscDrive.discType == "Audio")
		{
			stra = "     An Audio CD has been          detected.";
			strb = "     Do you wish to hear it ?";
		}
		else if(theDiscDrive.discType == "Video")
		{
			stra = "     A DVD movie has been          detected.";
			strb = "     Do you wish to watch it ?";
		}
		else if(theDiscDrive.discType == "Title")
		{
			stra = "     An Xbox Game has been          detected.";
			strb = "     Do you wish to play it ?";
		}
		else if(theDiscDrive.discType == "unknown")
		{
			stra = "     An Unknown disk type has          been detected.";
			strb = "     Do you wish to try to launch it and see what happens ?";
		}
		AskQuestion("\n" + stra + "\n" + strb,"AutoLaunch()","",1);
	}
}

function AutoLaunch()
{
        if (theDiscDrive.discType == "Audio")
        {
		AutoLaunchCDPlayer();

        }
        else if (theDiscDrive.discType == "Video")
        {
            theLauncherLevel.GoTo();
        }
        else if (theDiscDrive.discType == "Title")
        {
            theLauncherLevel.GoTo();
        }
        else if (theDiscDrive.discType == "unknown")
        {
            TellUser("ERROR MESSAGE 1","");
        }
}


function AutoLaunchCDPlayer()
{
	//theMusicInline.children[0].currentMusicPlayerMode = 3;
	theMusicInline.children[0].currentCDTrack = 0;
	theMusicInline.children[0].CDPlayerPlay();
}
//////////////////////////////////////////////////////Skin Subsystem////////////////////////////////////////////////////////
//////////////////////////////////////////////////////Skin Subsystem////////////////////////////////////////////////////////
DEF theSkinInline Inline
{
    visible false
    url "Skin.xap"

    function onLoad()
    {
      theSkinInline.children[0].theSkin.GoTo();
    }
}
function GoToSkin()
{
    if (theSkinInline.visible)
      theSkinInline.children[0].theSkin.GoTo();
    else
      theSkinInline.visible = true;
}

DEF theSkinBackground Background
{
    backdrop ImageTexture { url "background.xbx" }
    skyColor 0 0 0
}
DEF theBSXViewpoint Viewpoint
{
        fieldOfView 1.2
        orientation -0.177400 -1.983500 -0.036250 -0.045440
        position 000000 -30.299999 120.300003
        jump false
}


//////////////////////////////////////////////////////Skin Subsystem////////////////////////////////////////////////////////
//////////////////////////////////////////////////////Skin Subsystem////////////////////////////////////////////////////////
////////////////////////////////////////////////////////DNA///////////////////////////////////////////////////////////
function ShowIP()
{
	//TellUser(theTranslator.Translate("Author: " + author +"\nCredits: " + credits),"nada()");
	TellUser(theConfig.GetXboxIP(),"theMainMenu.GoTo()");
}
function LoadBGMeshValues()
{
	//mesh and alpha
	var theDNA = GetSavedValue("BGMesh","BGMesh");
	var DNAAlpha = GetSavedValue("BGMesh","Alpha");

	///dna spinner
	var x = GetSavedValue("BGMesh","BGMesh1 rpm");
	var y = GetSavedValue("BGMesh","BGMesh2 rpm");
	var z = GetSavedValue("BGMesh","BGMesh3 rpm");

	if((x == "") | (y == "") | (z == "")) { x = 2; y = 2; z = 2; }

	var c = theBGMeshInline.children[0];
	c.theDNA1.children[0].rpm = x;
	c.theDNA3.children[0].rpm = y;
	c.theDNA5.children[0].rpm = z;
/*
	if(theConfig.GetVideoMode() == 2)
	{
		c.theDNA1.SetTranslation(-5400, 0, -5100);
		c.theDNA3.SetTranslation(0, 0, -5000);
		c.theDNA5.SetTranslation(4000, 0, -5100);
	}
*/
	if (theDNA == "DNA")
	{ 
		c.DNA1_Mesh.url = "Backing_dna.xm"; 
		c.DNA3_Mesh.url = "Backing_dna.xm"; 
		c.DNA5_Mesh.url = "Backing_dna.xm"; 
		c.DNAString1_Mesh.url = "Backing_dna_SIDES.xm"; 
		c.DNAString3_Mesh.url = "Backing_dna_SIDES.xm"; 
		c.DNAString5_Mesh.url = "Backing_dna_SIDES.xm"; 
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha); 
	}
	else if (theDNA == "DNA V2")
	{ 
		c.DNA1_Mesh.url = "Backing_dna_new.xm"; 
		c.DNA3_Mesh.url = "Backing_dna_new.xm"; 
		c.DNA5_Mesh.url = "Backing_dna_new.xm"; 
		c.DNAString1_Mesh.url = "Backing_dna_SIDES_new.xm"; 
		c.DNAString3_Mesh.url = "Backing_dna_SIDES_new.xm"; 
		c.DNAString5_Mesh.url = "Backing_dna_SIDES_new.xm"; 
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha); 
	}
	else if (theDNA == "Chains") 
	{
		c.DNA1_Mesh.url = "chain.xm"; 
		c.DNA3_Mesh.url = "chain.xm"; 
		c.DNA5_Mesh.url = "chain.xm";
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha); 
	}
	else if (theDNA == "Spirals")
	{
		c.DNA1_Mesh.url = "spirals.xm"; 
		c.DNA3_Mesh.url = "spirals.xm"; 
		c.DNA5_Mesh.url = "spirals.xm"; 
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha);
	}
	else if (theDNA == "Squigles")
	{ 
		c.DNA1_Mesh.url = "Backing_squigles.xm"; 
		c.DNA3_Mesh.url = "Backing_squigles.xm"; 
		c.DNA5_Mesh.url = "Backing_squigles.xm"; 
		c.DNAString1_Mesh.url = "Backing_squigles_sides.xm"; 
		c.DNAString3_Mesh.url = "Backing_squigles_sides.xm"; 
		c.DNAString5_Mesh.url = "Backing_squigles_sides.xm"; 
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha); 
	}
	else if (theDNA == "Corkscrews")
	{
		c.DNA1_Mesh.url = "corkscrews.xm"; 
		c.DNA3_Mesh.url = "corkscrews.xm"; 
		c.DNA5_Mesh.url = "corkscrews.xm"; 
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha);
	}
	else if (theDNA == "Lightning")
	{
		c.DNA1_Mesh.url = "lightning.xm"; 
		c.DNA3_Mesh.url = "lightning.xm"; 
		c.DNA5_Mesh.url = "lightning.xm";
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha);
	}
	else if (theDNA == "Hearts")
	{
		c.DNA1_Mesh.url = "Hearts.xm"; 
		c.DNA3_Mesh.url = "Hearts.xm"; 
		c.DNA5_Mesh.url = "Hearts.xm";
		c.theDNA1.SetScale(6,6,6); 
		c.theDNA3.SetScale(6,6,6); 
		c.theDNA5.SetScale(6,6,6); 
		c.theDNA1.SetAlpha(DNAAlpha); 
		c.theDNA3.SetAlpha(DNAAlpha); 
		c.theDNA5.SetAlpha(DNAAlpha);
	}
	else if (theDNA == "Off") 
	{
		//c.DNA1_Mesh.url = "";
		//c.DNA3_Mesh.url = "";
		//c.DNA5_Mesh.url = "";
		//c.theDNA1.SetAlpha(0); 
		//c.theDNA3.SetAlpha(0); 
		//c.theDNA5.SetAlpha(0); 
	}
}

DEF theBGMesh Layer
{
    viewpoint Viewpoint
    {
        fieldOfView 1.2
		position -500 0 0
    }

    children
    [
        DEF theBGMeshTransform Transform
        {
            children
            [
                DEF theBGMeshInline Inline
                {
                    preload true
                    url "bg_mesh/default.xap"
                    function onLoad()
                    {
				        LoadBGMeshValues();
                    }
                }
            ]
        }
    ]
}

////////////////////////////////////////////////////////DNA END////////////////////////////////////////////////////////

////////////////////////////////////////////////////////INLINES////////////////////////////////////////////////////////
////////////////////////////////////////////////////////INLINES////////////////////////////////////////////////////////





DEF theFileManagerInline Inline
{
    visible false
    url "file_manager.xap"
    function onLoad() { theFileManagerInline.children[0].theFileManager.GoTo(); }
}

function GoToFileManager()
{
    theSettingsMenuIn.Play();
    if(theFileManagerInline.visible) { theFileManagerInline.children[0].theFileManager.GoTo(); }
    else
    {
        BlockMemoryUnitInsert();
        theFileManagerInline.visible = true;
    }
}

DEF theMusicInline Inline
{

    visible false
    url "music.xap"
    function onLoad() { theMusicInline.children[0].theMusicMenu.GoTo(); }
}

function GoToMusic()
{
    if(theMusicInline.visible) { theMusicInline.children[0].theMusicMenu.GoTo(); }
    else
    {
        BlockMemoryUnitInsert();
        theMusicInline.visible = true;
    }
}

DEF theMemoryInline Inline
{
    visible false
    url "memory.xap"

    function onLoad()
    {
        theMemoryInline.children[0].theMemoryMenu.GoTo();
    }
}

function GoToMemory()
{
    theGamesMenuIn.Play();
    if (theMemoryInline.visible)
        theMemoryInline.children[0].theMemoryMenu.GoTo();
    else
        theMemoryInline.visible = true;
}

DEF theSettingsInline Inline
{
    visible false
    url "settings.xap"

    function onLoad()
    {
        theSettingsInline.children[0].theSettingsMenu.GoTo();
    }
}

function GoToSettings()
{
    theSettingsMenuIn.Play();
    bBackToDVDPlayer = false;

    if (theSettingsInline.visible)
        theSettingsInline.children[0].theSettingsMenu.GoTo();
    else
        theSettingsInline.visible = true;
}
DEF theBSXInline Inline
{
    visible false
    url "BlackstormX.xap"
    function onLoad() { theBSXInline.children[0].theBSXMenu.GoTo(); }
}

function GoToBSX()
{
    if( theBSXInline.visible ) { theBSXInline.children[0].theBSXMenu.GoTo(); }
    else { theBSXInline.visible = true; }
}

DEF theUIXConfigInline Inline
{
    visible false
    url "config.xap"

    function onLoad()
    {
        theUIXConfigInline.children[0].theConfigPanel.GoTo();
    }
}

function GoToUIXConfig()
{
    if (theUIXConfigInline.visible)
        theUIXConfigInline.children[0].theConfigPanel.GoTo();
    else
        theUIXConfigInline.visible = true;
}


/*
DEF theMSSkinsInline Inline
{

    visible false
    url "ms_skins.xap"

    function onLoad()
    {
        theMSSkinsInline.children[0].theMSSkinsMenu.GoTo();
    }
}

function GoToMSSkins()
{
    theSettingsMenuIn.Play();
    if (theMSSkinsInline.visible)
        theMSSkinsInline.children[0].theMSSkinsMenu.GoTo();
    else
    {
        //BlockMemoryUnitInsert();
        theMSSkinsInline.visible = true;
    }
}

*/
DEF theSkinsInline Inline
{
    visible false
    url "ms_skins.xap"
    function onLoad() { theSkinsInline.children[0].theSkinsMenu.GoTo(); }
}

function GoToMSSkins()
{
    theSettingsMenuIn.Play();
	if( theSkinsInline.visible ) { theSkinsInline.children[0].theSkinsMenu.GoTo(); }
    else { theSkinsInline.visible = true; }
}
DEF theBSXSkinInline Inline
{
    visible false
    url "BSXSkin.xap"

    function onLoad()
    {
      theBSXSkinInline.children[0].theBSXSkin.GoTo();
    }
}
function GoToBSXSkin()
{
    if (theBSXSkinInline.visible)
      theBSXSkinInline.children[0].theBSXSkin.GoTo();
    else
      theBSXSkinInline.visible = true;
}
DEF theOrbsInline Inline
{
 visible false
 url "orbs.xap"
 function onLoad() { theOrbsInline.children[0].theOrbsMenu.GoTo(); }
}
function GoToOrbs()
{
 theSettingsMenuIn.Play();
 if( theOrbsInline.visible ) { theOrbsInline.children[0].theOrbsMenu.GoTo(); }
 else { theOrbsInline.visible = true; }
}

DEF theMusicPlayWithSubsInline Inline
{
    visible false
    url "music_play_with_subs.xap"
    function onLoad()  { theMusicPlayWithSubsInline.children[0].theMusicPlayWithSubs.GoTo(); }
}

function GoToHD()
{
    theSettingsMenuIn.Play();
    if (theMusicPlayWithSubsInline.visible)
        theMusicPlayWithSubsInline.children[0].theMusicPlayWithSubs.GoTo();
    else
        theMusicPlayWithSubsInline.visible = true;
}


DEF theSettingsStyleMenuInline Inline
{
    visible false
    url "settings_style_menu.xap"
    function onLoad()  { theSettingsStyleMenuInline.children[0].theSettingsStyleMenu.GoTo(); }
}

function GoToSettingsStyleMenu()
{
    if(theSettingsStyleMenuInline.visible) { theSettingsStyleMenuInline.children[0].theSettingsStyleMenu.GoTo(); }
    else { theSettingsStyleMenuInline.visible = true; }
}

////////////////////////////////////////////////////////INLINES////////////////////////////////////////////////////////
////////////////////////////////////////////////////////INLINES////////////////////////////////////////////////////////


///////////////////////////////////////////////////////FUNCTIONS///////////////////////////////////////////////////////
///////////////////////////////////////////////////////FUNCTIONS///////////////////////////////////////////////////////
///////////////////////////////////////////////////////MUSIC///////////////////////////////////////////////////////////
function MusicPlayerVolumeUp()
{
	if(theMusicPlayer.volume >= 0.99) { theMusicPlayer.volume = 1.0; }
	else { theMusicPlayer.volume = theMusicPlayer.volume + 0.01; }

	if(ControlPanelOut) { theControlPanelControlsInline.children[0].UpdateVolumeOnScreen(); }
	//theControlPanelControlsInline.children[0].SaveVolume();
}

function MusicPlayerVolumeDown()
{
	if(theMusicPlayer.volume <= 0.0) { theMusicPlayer.volume = 0.0; }
	else { theMusicPlayer.volume = theMusicPlayer.volume - 0.01; }

	if(ControlPanelOut) { theControlPanelControlsInline.children[0].UpdateVolumeOnScreen(); }
	//theControlPanelControlsInline.children[0].SaveVolume();
}

function MusicPlayerStop()
{
	theMusicPlayer.Stop();
	BGMon = false;
	EnableAmbientAudio();

	////////////////////////////////////////////////////////////
	albumtext = "";
	songtext = "";
	var c = DefineVarC();
	c.theSoundtrackAlbumInfoText.text = albumtext;
	c.theSoundtrackSongInfoText.text = songtext;
	////////////////////////////////////////////////////////////
	theInLine.theTrackTimeText.text = "00:00";
	////////////////////////////////////////////////////////////
}

function PlaySong(x,y)
{
	currentMusicPlayerMode = "Continuous";
	theMusicPlayer.Stop();
	currentAlbum = x;
	currentTrack = y;
	theMusicPlayer.url = "st:" + theMusicCollection.GetSoundtrackSongID(currentAlbum, currentTrack);
	theMusicPlayer.Play();

	///////////////////////////////////////////////////////////////////////////////
	albumtext = theMusicCollection.GetSoundtrackName(currentAlbum);
	songtext = theMusicCollection.GetSoundtrackSongName(currentAlbum, currentTrack);
	var c = DefineVarC();
	c.theSoundtrackAlbumInfoText.text = albumtext;
	c.theSoundtrackSongInfoText.text = songtext;
	//////////////////////////////////////////////////////////////////////////////
	theControlPanelControlsInline.children[0].SaveMode();
	theControlPanelControlsInline.children[0].UpdateMusicPlayerDisplayText();
	//////////////////////////////////////////////////////////////////////////////
}

function MusicPlayerPlay()
{
	theMusicPlayer.Stop();
	BGMon = true;
	DisableAmbientAudio();
	theMusicPlayer.url = "st:" + theMusicCollection.GetSoundtrackSongID(currentAlbum, currentTrack);
	theMusicPlayer.Play();

	///////////////////////////////////////////////////////////////////////////////////////
	albumtext = theMusicCollection.GetSoundtrackName(currentAlbum);
	songtext = theMusicCollection.GetSoundtrackSongName(currentAlbum, currentTrack);
	var c = DefineVarC();
	c.theSoundtrackAlbumInfoText.text = albumtext;
	c.theSoundtrackSongInfoText.text = songtext;
	///////////////////////////////////////////////////////////////////////////////////////
	theControlPanelControlsInline.children[0].UpdateMusicPlayerDisplayText();
	///////////////////////////////////////////////////////////////////////////////////////
}

function MusicPlayerRandom()
{
	currentMusicPlayerMode = "Random";
	DisableAmbientAudio();//todo - make it not needed
	var totalAlbums = theMusicCollection.GetSoundtrackCount() - 1;
	var a = Math.random() * totalAlbums;
	currentAlbum = Math.round(a);
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum) - 1;
	var b = Math.random() * totalTracks;
	currentTrack = Math.round(b);
	MusicPlayerPlay();
}

/*
//This is stupid function to avoid replaying the same track. never worked properly.
var b_repeated;
function MusicPlayerRandom()
{
	var previousTrack = currentTrack;
	var previousAlbum = currentAlbum;

	currentMusicPlayerMode = "Random";
	DisableAmbientAudio();//todo - make it not needed
	var totalAlbums = theMusicCollection.GetSoundtrackCount() - 1;
	var a = Math.random() * totalAlbums;
	currentAlbum = Math.round(a);
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum) - 1;
	var b = Math.random() * totalTracks;
	currentTrack = Math.round(b);
	//MusicPlayerPlay();

	if(( currentAlbum == previousAlbum) & (currentTrack == previousTrack))
	{
		b_repeated = true;
		while(b_repeated)
		{
			currentMusicPlayerMode = "Random";
			DisableAmbientAudio();//todo - make it not needed
			var totalAlbums = theMusicCollection.GetSoundtrackCount() - 1;
			var a = Math.random() * totalAlbums;
			currentAlbum = Math.round(a);
			var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum) - 1;
			var b = Math.random() * totalTracks;
			currentTrack = Math.round(b);

			if(( currentAlbum != previousAlbum) & (currentTrack != previousTrack))
			{
				b_repeated = false;
				MusicPlayerPlay();
				break;
			}
		}
	}
	else { MusicPlayerPlay(); }
}
*/

function MusicPlayerRewind()
{
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum) - 1;
	if(currentTrack == 0)
	{
		currentTrack = totalTracks;
		MusicPlayerPlay();
	}
	else
	{
		currentTrack = currentTrack - 1;
		MusicPlayerPlay();
	}
}

function MusicPlayerFastForward()
{
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum) - 1;
	if(currentTrack == totalTracks)
	{
		currentTrack = 0;
		MusicPlayerPlay();
	}
	else
	{
		currentTrack = currentTrack + 1;
		MusicPlayerPlay();
	}
}

function ChangeAlbumRight()
{
	currentTrack = 0;

	var totalAlbums = theMusicCollection.GetSoundtrackCount() - 1;
	if (currentAlbum < totalAlbums) { currentAlbum = currentAlbum + 1; }
	else if (currentAlbum == totalAlbums) { currentAlbum = 0; }
        MusicPlayerPlay();
}

function ChangeAlbumLeft()
{
	currentTrack = 0;

	if (currentAlbum > 0) { currentAlbum = currentAlbum - 1; }
	else if (currentAlbum == 0) { currentAlbum = 0; }
        MusicPlayerPlay();
}
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

DEF theMusicCollection  MusicCollection
{
    function OnCopyComplete() { theMusicInline.children[0].OnMusicCopyComplete(); }

    function OnCopyProgressChanged()
    {
		UpdateProgressText(theMusicCollection.GetUpdateString());
        SetProgress(copyProgress);
    }

    function OnAddSoundtrackNewSongFailed(ErrorCode)
    {
        g_nRec = ErrorCode;
        if (ErrorCode == 1) { theLauncherLevel.GoTo(); }
    }
}

//new addition: AudioClip playbackModes
//theMusicPlayer.playbackMode = 0; Continuous from Soundtracks
//theMusicPlayer.playbackMode = 1; Random in current Soundtrack
//theMusicPlayer.playbackMode = 2; Random Globally in Soundtracks
//theMusicPlayer.playbackMode = 3; Repeat current song

//theMusicPlayer.playbackMode = 4; Continuous from Playlist
//theMusicPlayer.playbackMode = 5; Random in current Playlist
//theMusicPlayer.playbackMode = 6; Random Globally in Playlist
//until we do a soundtracks update to include playlists only soundtrack random is used...

DEF theMusicPlayer AudioClip
{
    url "cd:"
    sendProgress true
	volume 0.86
    function OnProgressChanged()
    {
	if(bInMusicMenu == true) { theMusicInline.children[0].SetMusicPlayPos(progress); }
	else if(ControlPanelOut == true) { theControlPanelControlsInline.children[0].UpdateTrackTime(); }
    }
    function OnTransportModeChanged()     { if (bInMusicMenu == true) { theMusicInline.children[0].UpdateTransportIndicators(); } }
    function OnTrackChanged()
    {
	if (bInMusicMenu == true) { theMusicInline.children[0].UpdateTrackList(); }
	else if(ControlPanelOut == true) { theControlPanelControlsInline.children[0].UpdateMusicPlayerDisplayText(); }
    }
    function OnEndOfAudio()
    {
		if (bInMusicMenu == true) { theMusicInline.children[0].DoEndOfAudio(); }
		else
		{
			//if( theMusicPlayer.playbackMode == 0 ) { MusicPlayerFastForward(); }
			//else if( theMusicPlayer.playbackMode == 2 ) { MusicPlayerRandom(); }

	  		if(currentMusicPlayerMode == "Playlist") { theControlPanelControlsInline.children[0].PlaylistFFWD(); }
	  		else if(currentMusicPlayerMode == "Continuous") { theControlPanelControlsInline.children[0].SoundtrackFFW(); }
	  		else if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
	  		else if(currentMusicPlayerMode == "Repeat") { theControlPanelControlsInline.children[0].MusicPlayerRepeat(); }
		}			
    }
}

DEF audioVisualizer DynamicTexture
{
    palette Palette { type 7 changePeriod 3 }
    size 352
    erase false
    fps 60
    children
    [
        ImageFader { changePeriod 10 }
        StarField
	//DotField
        AudioVisualizer
        {
            source USE theMusicPlayer
            type "circle"
            scale 1.5
        }
        AudioVisualizer
        {
            source USE theMusicPlayer
            //type "analyzer"
            type "bubble"
	    //type "ambience"
        }
    ]
}

function MusicOnBootCheck()
{
	if(CheckOnce == false)
	{

		var a = GetSavedValue("Dashboard Settings","Music On Boot");
		IniFile.CloseIniFile();

		if(a == "true") 
        	{
			var totalAlbums = theMusicCollection.GetSoundtrackCount() - 1;
			if(totalAlbums > 0)
			{
				theControlPanelControlsInline.children[0].MusicPlayerStart();
				UpdateDVDIconStatus();
			}
        	}
		else if(a == "false") { EnableAmbientAudio(); }
		CheckOnce = true;
	}
}

///////////////////////////////////////////////////////MUSIC///////////////////////////////////////////////////////////
DEF theGlobal Transform
{ 
        visible false
 	children
  	[
  		Shape
  		{
  			appearance Appearance { material Material {  } }
  			geometry DEF theCellWallMesh Mesh
  		}
  	]
  	scale 0 0 0
  	translation 500 0 0
}


function LaunchXBMC() { launch ("default.xbe", "\\Device\\Harddisk0\\Partition6\\apps\\XBMC" ); }
//function Insignia() { launch ("xonlinedash.xbe", "\\Device\\Harddisk0\\Partition2\\xodash" ); }

function ReStartDash()
{
	b_restart = true;
	theLauncherLevel.GoTo();
}

function RefreshCaches()
{
	theGamesMenu.RefreshCache();
	theApplicationsMenu.RefreshCache();
	theEmulatorsMenu.RefreshCache();
	theDashboardsMenu.RefreshCache();
}

function UpDateMainMenuButtonsText()
{

	var c = theMainMenu.children[0].children[0];
	c.Button_01_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 1");
	c.Button_02_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 2");
	//c.Button_03_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 3");
	//c.Button_04_Text.geometry.text = IniFile.GetIniValue( "Tab 4 Text" );
	if(mainTabs == 3) { c.Button_03_Text.geometry.text =  GetSavedValue("Main Menu Buttons Text","Button 5"); }
	else if(mainTabs == 4)
	{
		c.Button_03_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 3");
		c.Button_04_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 5");
	}
	else
	{
		c.Button_03_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 3");
		c.Button_04_Text.geometry.text = GetSavedValue("Main Menu Buttons Text","Button 4");
		c.theMainTab04.text = GetSavedValue("Main Menu Buttons Text","Button 5");
	}
}

function MainMenuAttract()
{
	var a = 0;
	var c = theMainMenu.children[0].children[0];
	var d = theMainMenu.children[0].children[0].theMainMenuLevel.children[0];
	d.fade = a;
	//c.Rotating_Large_X.fade = a; 
	c.ring.fade = a; 
	c.main_pod1.fade = a; 
	c.main_poda.fade = a; 
	c.main_podb.fade = a; 
	c.main_pod2.fade = a; 
	var f = GetSavedValue("Orb Style","pod");
	if (f == "normal")
	{
	 c.main_pod2.visible = true;
	 c.main_pod2b.visible = false;
	}
	else if (f == "odbpod")
	{
        c.main_pod2b.visible = true;
        c.main_pod2.visible = false;
	}
	else
	{
	c.main_pod2b.visible = false;
	c.main_pod2.visible = false;
	}
	c.Stock_Orb.fade = a;
	c.Modded_Orb.fade = a;
	c.Gasclown.fade = a;	
	c.THC_Orb.fade = a; 
	d.SetRotation(0,0,0,0);
	d.SetTranslation(0,0,0);
	c.Rotating_Large_X.SetTranslation(0,0,0);
	c.ring.SetTranslation(-57.980000,-13.690000,-84.760002);
	c.main_pod1.SetTranslation(-61.689999 ,-13.400000 ,0.337400); 
	c.main_poda.SetTranslation(-61.689999 ,-13.400000 ,0.337400); 
	c.main_podb.SetTranslation(-61.689999 ,-13.400000 ,0.337400); 
	c.main_pod2.SetTranslation(-61.689999 ,-13.400000 ,0.337400);

	c.Stock_Orb.SetScale(1.44,1.44,1.44);
	c.Modded_Orb.SetScale(65,65,65);
	c.THC_Orb.SetScale(43,43,43);
	c.Gasclown.SetScale(43,43,43);
        var OrbName=GetOrbName();
        var info = new Settings;
        info.file = OrbName + ".xbx";
        info.section = "Orb";
        var scalex;
        var scaley;
        var scalez;
        scalex = info.GetValue("Scalex");
        scaley = info.GetValue("Scaley");
        scalez = info.GetValue("Scalez");
        c.gasorb.SetScale(scalex,scaley,scalez);
		GetOrb();
        if(customorb == true)
        {
        c.Rotating_Large_X.fade = 0.43;
        ChangeTheOrb( OrbName + ".xm" );
        }
        else
        {
        } 
}

DEF theMainMenuViewpoint Viewpoint
{
        fieldOfView 1.300000
        orientation -0.177400 -0.983500 -0.036250 -0.045440
        position 11.180000 -32.299999 174.300003
        jump false
}

DEF theBSXViewpoint Viewpoint
{
        fieldOfView 1.2
        orientation -0.177400 -1.983500 -0.036250 -0.045440
        position 000000 -30.299999 120.300003
        jump false
}

DEF mainSoundtrackViewpoint Viewpoint
{
	fieldOfView 1.287000
	orientation 0 1 0 0
	position -58.230001 -12.700000 65.380000
	jump false
}

function ApplyDashStyle()
{
var c = theMainMenu.children[0].children[0];
if( dashStyle == "Modded" )
{    
		c.Large_X_Spinner.rpm 	= 1;
		c.Pod_1_Spinner.rpm 	= 1.3;
		c.Pod_2_Spinner.rpm 	= 1.3;
		c.Pod_3_Spinner.rpm 	= 1.3;
		c.Pod_4_Spinner.rpm 	= 1.3;
		c.Pod_5_Spinner.rpm 	= 1.3;
		c.MainPod_1_Spinner.rpm = -1;
		c.MainPod_2_Spinner.rpm = 1.3;
		c.MainPod_3_Spinner.rpm = -2.3;
		c.MainPod_4_Spinner.rpm = -1.0;
		c.main_pod1.visible = true;
		c.main_poda.visible = true;
		c.main_podb.visible = true;
		c.main_pod2.visible = true;
		c.podsupport_ring.visible  = false;
		c.Dark_Pod_Backing.visible = true;
		c.Stock_Orb.visible 	   = false;
		c.Gasclown.visible 	   = false;
		c.THC_Orb.visible 	   = false;
		c.select.visible 	   = false;
		c.Main_memory_podarm_1.visible 	   = false;
		c.Main_memory_podarm_2.visible 	   = false;
		c.Main_memory_podarm_3.visible 	   = false;
		c.Main_memory_podarm_4.visible 	   = false;
		c.Main_memory_podsocket_inner02.visible 	   = false;
		c.Main_memory_podsocket_outer02.visible 	   = false;
		
		var a = 0.43;
		c.Rotating_Large_X.fade = a;
		c.theMenuItems.fade = a;
		c.theMemoryItem.fade = a;
		c.theMusicItem.fade = a;
		c.theOnlineItem.fade = a;
		c.theSettingsItem.fade = a;
		c.theSkinsTab.fade = a;
}

else if( dashStyle == "Stock")
{
		c.Modded_Orb.visible     = false;
		c.THC_Orb.visible 	   = false;
		c.Gasclown.visible 	   = false;
		c.Dark_Pod_Backing.visible = false;
		
		var a = 0.25;
		c.Rotating_Large_X.fade = a;
		c.theMenuItems.fade = a;
		c.theMemoryItem.fade = a;
		c.theMusicItem.fade = a;
		c.theOnlineItem.fade = a;
		c.theSettingsItem.fade = a;
		c.theSkinsTab.fade = a;
}

else if( dashStyle == "THC" )
{
		c.Large_X_Spinner.rpm 	= 1;
		c.Pod_1_Spinner.rpm 	= 1.3;
		c.Pod_2_Spinner.rpm 	= 1.3;
		c.Pod_3_Spinner.rpm 	= 1.3;
		c.Pod_4_Spinner.rpm 	= 1.3;
		c.Pod_5_Spinner.rpm 	= 1.3;
		c.MainPod_1_Spinner.rpm = -1;
		c.MainPod_2_Spinner.rpm = 1.3;
		c.MainPod_3_Spinner.rpm = -2.3;
		c.MainPod_4_Spinner.rpm = -1.0;
		c.THC_Orb.visible 	   = true;
		c.Gasclown.visible 	   = false;
		c.Modded_Orb.visible 	   = false;
		c.Stock_Orb.visible        = false;
		c.podsupport_ring.visible  = false;
		c.select.visible 	   = false;
		c.Dark_Pod_Backing.visible = false;
		
		var a = 0.43;
		c.Rotating_Large_X.fade = a;
		c.theMenuItems.fade = a;
		c.theMemoryItem.fade = a;
		c.theMusicItem.fade = a;
		c.theOnlineItem.fade = a;
		c.theSettingsItem.fade = a;
		c.theSkinsTab.fade = a;
}
else if( dashStyle == "Gasclown" )
{
		c.Large_X_Spinner.rpm 	= 1;
		c.Pod_1_Spinner.rpm 	= 1.3;
		c.Pod_2_Spinner.rpm 	= 1.3;
		c.Pod_3_Spinner.rpm 	= 1.3;
		c.Pod_4_Spinner.rpm 	= 1.3;
		c.Pod_5_Spinner.rpm 	= 1.3;
		c.MainPod_1_Spinner.rpm = -1;
		c.MainPod_2_Spinner.rpm = 1.3;
		c.MainPod_3_Spinner.rpm = -2.3;
		c.MainPod_4_Spinner.rpm = -1.0;
		c.THC_Orb.visible 	   = false;
		c.Gasclown.visible 	   = true;
		c.Modded_Orb.visible 	   = false;
		c.Stock_Orb.visible        = false;
		c.podsupport_ring.visible  = false;
		c.select.visible 	   = false;
		c.Dark_Pod_Backing.visible = false;
		
		var a = 0.43;
		c.Rotating_Large_X.fade = a;
		c.theMenuItems.fade = a;
		c.theMemoryItem.fade = a;
		c.theMusicItem.fade = a;
		c.theOnlineItem.fade = a;
		c.theSettingsItem.fade = a;
		c.theSkinsTab.fade = a;
}

}
	
function InitializeMenus() //use this to setpaths for any TitleMenu objects you create
{
/*	var a = GetSavedValue( "Games Menu", "Path" );
	theGamesMenu.SetPath( a );
	a = GetSavedValue( "Games Menu", "Name" );
	theGamesMenu.CreateMenu( a );

	a = GetSavedValue( "Applications Menu", "Path" );
	theApplicationsMenu.SetPath( a );
	a = GetSavedValue( "Applications Menu", "Name" );
	theApplicationsMenu.CreateMenu a );

	a = GetSavedValue( "Emulators Menu", "Path" );
	theEmulatorsMenu.SetPath( a );
	a = GetSavedValue( "Emulators Menu", "Name" );
	theEmulatorsMenu.CreateMenu( a );

	a = GetSavedValue( "Dashboards Menu", "Path" );
	theDashboardsMenu.SetPath( a );
	a = GetSavedValue( "Dashboards Menu", "Name" );
	theDashboardsMenu.CreateMenu( a );
*/
	theGamesMenu.SetPath( "games" );
	theApplicationsMenu.SetPath( "apps" );
	theEmulatorsMenu.SetPath( "emulators" );
	theDashboardsMenu.SetPath( "dashboards" );
}



/*
function QuickLaunchA() { QuickLaunch("A"); }
function QuickLaunchB() { QuickLaunch("B"); }
function QuickLaunchX() { QuickLaunch("X"); }
function QuickLaunchY() { QuickLaunch("Y"); }
*/
function StartScreenSaverView()
{
	bInScreenSaverView = true;
	DoScreenSaverView();
}

function DoScreenSaverView()
{
	var c = theMainMenu.children[0].children[0];
	c.theMainMenuLevel.fade = 3;
	c.theMenuItems.SetAlpha(0);
	EnableCurrentAlternateViewpoint();
	ToggleInfoPanel();
	MainMenuPositionOne();
}

function StopScreenSaverView()
{
	bInScreenSaverView = false;
	var c = theMainMenu.children[0].children[0];
	//theMainMenuSpinner.rpm = 0;
	c.theMainMenuLevel.fade = 0.25;
	c.theMainMenuLevel.SetRotation(0,0,0,0);
	c.theMainMenuLevel.SetTranslation(0,0,0);
	DisableCurrentAlternateViewpoint();
	c.theMenuItems.SetAlpha(1);
	ToggleInfoPanel();
	UpdateDVDIconStatus();
}
function MainMenuPositionOne()
{
	var c = theMainMenu.children[0].children[0];
	//theMainMenuSpinner.rpm = 5;
	c.theMainMenuLevel.fade = 100;
	c.theMainMenuLevel.SetTranslation( 30, -104, 4 );
}

function MainMenuPositionTwo()
{
	var c = theMainMenu.children[0].children[0];
	//theMainMenuSpinner.rpm = 4;
	c.theMainMenuLevel.fade = 100;
	c.theMainMenuLevel.SetTranslation( 74, -46, -14 );
	c.theMainMenuLevel.SetRotation( -0.0006, 0, 0.00005, 0.314159 );
}

function MainMenuPositionThree()
{
	var c = theMainMenu.children[0].children[0];
	//theMainMenuSpinner.rpm = 3;
	c.theMainMenuLevel.fade = 100;
	c.theMainMenuLevel.SetTranslation( -24, -36, -262 );
	c.theMainMenuLevel.SetRotation( -0.001, 0.0003, 0.0003, 0.314159 );
}

function FillMenuList(x) // search c,e,f,g for a relative path's contents to use to fill a menu
{
	var FolderName = x;
	var c = new Folder; //def a new folder
	c.path = "C:\\" + FolderName; //def it's path
	var cSize = c.subFolders.length(); //find the number of subfolders in it
	var cTitles = new Array(cSize); //setup a loop to put it's contents into an array
	    if(cSize > 0)
	    {
	 	for(var cLoop = 0; cLoop < cSize; cLoop = cLoop + 1)
	 	{
	 		cTitles[cLoop] = c.subFolders[cLoop].name;
	 	}
	    }
	var e = new Folder; //repeat above for all drives
	e.path = "E:\\" + FolderName;
	var eSize = e.subFolders.length();
	var eTitles = new Array(eSize);
	    if(eSize > 0)
	    {
	 	for(var eLoop = 0; eLoop < eSize; eLoop = eLoop + 1)
	 	{
	 		eTitles[eLoop] = e.subFolders[eLoop].name;
	 	}
	    }
	var f = new Folder;
	f.path = "F:\\" + FolderName;
	var fSize = f.subFolders.length();
	var fTitles = new Array(fSize);
	    if(fSize > 0)
	    {
	 	for(var fLoop = 0; fLoop < fSize; fLoop = fLoop + 1)
	 	{
	 		fTitles[fLoop] = f.subFolders[fLoop].name;
	 	}
	    }
	var g = new Folder;
	g.path = "G:\\" + FolderName;
	var gSize = g.subFolders.length();
	var gTitles = new Array(gSize);
	    if(gSize > 0)
	    {
	 	for(var gLoop = 0; gLoop < gSize; gLoop = gLoop + 1)
	 	{
	 		gTitles[gLoop] = g.subFolders[gLoop].name;
	 	}
	    }

//Cerbios
	var h = new Folder;
	h.path = "H:\\" + FolderName;
	var hSize = h.subFolders.length();
	var hTitles = new Array(hSize);
	    if(hSize > 0)
	    {
	 	for(var hLoop = 0; hLoop < hSize; hLoop = hLoop + 1)
	 	{
	 		hTitles[hLoop] = h.subFolders[hLoop].name;
	 	}
	    }
	var i = new Folder;
	i.path = "I:\\" + FolderName;
	var iSize = i.subFolders.length();
	var iTitles = new Array(iSize);
	    if(iSize > 0)
	    {
	 	for(var iLoop = 0; iLoop < iSize; iLoop = iLoop + 1)
	 	{
	 		iTitles[iLoop] = i.subFolders[iLoop].name;
	 	}
	    }
	var mA = eTitles.concat(fTitles);//keep merging the arrays till you have one big one
	var oA = mA.concat(cTitles);
	var nA = oA.concat(gTitles);
	nA = nA.sort();//sort the one big array into alphabetical order
	return nA;//return the array
}


function LaunchItem(x,y)
{
	var RelativePath = x;
	var FolderName = y;
   	var checkc = theHardDrive.FileExists( "C:\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
   	var checke = theHardDrive.FileExists( "E:\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
   	var checkf = theHardDrive.FileExists( "F:\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
   	var checkg = theHardDrive.FileExists( "G:\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
	//Cerbios
	var checkh = theHardDrive.FileExists( "H:\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
   	var checki = theHardDrive.FileExists( "I:\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
   	var checkevoxc = theHardDrive.FileExists( "C:\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
   	var checkevoxe = theHardDrive.FileExists( "E:\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
   	var checkevoxf = theHardDrive.FileExists( "F:\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
   	var checkevoxg = theHardDrive.FileExists( "G:\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
   	var checkevoxh = theHardDrive.FileExists( "H:\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
   	var checkevoxi = theHardDrive.FileExists( "I:\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
   	if(checkc == true)
   	{
		launch( "default.xbe", "\\Device\\Harddisk0\\Partition2\\" + RelativePath + "\\" + FolderName );
   	}
   	else if(checke == true)
   	{
		launch( "default.xbe", "\\Device\\Harddisk0\\Partition1\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkf == true)
   	{
		launch( "default.xbe", "\\Device\\Harddisk0\\Partition6\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkg == true)
   	{
		launch( "default.xbe", "\\Device\\Harddisk0\\Partition7\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkh == true)
   	{
		launch( "default.xbe", "\\Device\\Harddisk0\\Partition8\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checki == true)
   	{
		launch( "default.xbe", "\\Device\\Harddisk0\\Partition9\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkevoxc == true)
   	{
		launch( "evoxdash.xbe", "\\Device\\Harddisk0\\Partition2\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkevoxe == true)
   	{
		launch( "evoxdash.xbe", "\\Device\\Harddisk0\\Partition1\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkevoxf == true)
   	{
		launch( "evoxdash.xbe", "\\Device\\Harddisk0\\Partition6\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkevoxg == true)
   	{
		launch( "evoxdash.xbe", "\\Device\\Harddisk0\\Partition7\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkevoxh == true)
   	{
		launch( "evoxdash.xbe", "\\Device\\Harddisk0\\Partition8\\" + RelativePath + "\\" + FolderName );
   	}
	else if(checkevoxI == true)
   	{
		launch( "evoxdash.xbe", "\\Device\\Harddisk0\\Partition9\\" + RelativePath + "\\" + FolderName );
   	}
}

function PowerOff()
{
	AskQuestion("\n \n          Power Off Xbox?", "ShutDown()", "", 1);
}

function ShutDown()
{
	theConfig.SetAutoOff(1);
}

function Reboot()//scripted reboot - last stage of a recovery is to reboot - let's make the box think we just did a recovery and now it's time to reboot :)
{
	theSettingsInline.children[0].theRecovery.FinishRecovery();
}

function ReturnInteger(x) // data read from xbx is read as a string - this will convert that string value to an integer
{
	var a = x;
	var b = Math.abs(a);
	if(a.charCodeAt(0) == 45)
	{
		var c = b * 2;
		b = b - c;
	}
	return b;
}

function SetSavedValue(x,y,z) // setup as global function as a basis for setting a value in data file to eliminate redundant code - that and i'm lazy and don't like to type more than i have to - work smart, not hard ;)
{
	var a = x; //read in a real comment from a dash scripter somewhere in these xaps that there was a bug using the x,y,z values without assigning them to a new var - who am i to question him lol - so this is how i do it ;)
	var b = y;
	var c = z;
	DataFile.section = a; //this will create the section in data file - if it doesn't exist it will be written as soon as you set a value within the section
	var d = DataFile.SetValue(b,c); //value set and data written to the xbx
}

function GetSavedValue(x,y) // same as above ;)
{
	var a = x;
	var b = y;
	DataFile.section = a;
	var c = DataFile.GetValue(b);
	return c;
}
	
function MainMenu_Launch()
{
	var a = GetSavedValue(CurrentSavedDataSection,"Launch");
	eval(a);
}

















///////////////////////////////////////////////////////FUNCTIONS///////////////////////////////////////////////////////
///////////////////////////////////////////////////////FUNCTIONS///////////////////////////////////////////////////////




DEF theScreen Screen
{
    width 640
    height 480
}


DEF theAmbientSounds Group
{
    children
    [
        DEF theAmbientSound0 AudioClip { url "audio/ambient audio/amb_12_hydrothunder_lr.wav" loop true volume 0 fade 2 }
        DEF theAmbientSound1 AudioClip { url "audio/ambient audio/amb_12_hydrothunder_lr.wav" loop true volume 0 fade 2 }
        DEF theAmbientSound2 AudioClip { url "audio/ambient audio/amb_06_communication_lr.wav" loop true volume 0 fade 2 }
        DEF theAmbientSound3 AudioClip { url "audio/ambient audio/amb_05_engineroom_lr.wav" loop true volume 0 fade 2 }
    ]
}

DEF thePeriodicSounds Group
{
    children
    [
        PeriodicAudioGroup
        {
            period 60 // how many seconds between sounds (minimum)
            periodNoise 20 // maximum random seconds to add to period
            children
            [
                AudioClip { url "audio/ambient audio/amb_ec_steam1.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_steam2.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_steam3.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_steam4.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_steam5.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_steam6.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_steam7.wav" volume 0.80 }
            ]
        }

        PeriodicAudioGroup
        {
            period 120 // how many seconds between sounds (minimum)
            periodNoise 30 // maximum random seconds to add to period
            children
            [
                AudioClip { url "audio/ambient audio/amb_ec_voices1.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices2.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices3.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices4.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices5.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices6.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices7.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices8.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices9.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices10.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices11.wav" volume 0.80 }
                AudioClip { url "audio/ambient audio/amb_ec_voices12.wav" volume 0.80 }
            ]
        }

        PeriodicAudioGroup
        {
            period 45 // how many seconds between sounds (minimum)
            periodNoise 15 // maximum random seconds to add to period
            children
            [
                AudioClip { url "audio/ambient audio/comm voice 1.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 2.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm static 1.wav" fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 3.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 4.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm static 2.wav" fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 5.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 6.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm static 3.wav" fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 7.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 8.wav"  fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm static 4.wav" fade 2 volume 0.85 }
                AudioClip { url "audio/ambient audio/comm voice 9.wav"  fade 2 volume 0.85 }
            ]
        }

        PeriodicAudioGroup
        {
            period 300
            periodNoise 60
            children
            [
                AudioClip { url "audio/ambient audio/amb_ec_pinger1.wav" volume 0.85 }
                AudioClip { url "audio/ambient audio/control room loop.wav" volume 0.85 }
                AudioClip { url "audio/ambient audio/control room loop ver2.wav" volume 0.85 }
            ]
        }
    ]
}

function EnableAmbientAudio()
{
    var n = Math.round(Math.random() * (theAmbientSounds.children.length() - 1));
    log("Picking ambient track " + (n + 1));
    for(var i = 0; i < theAmbientSounds.children.length(); i = i + 1) { theAmbientSounds.children[i].volume = 0; }
    theAmbientSounds.children[n].volume = 0.95;
    for(i = 0; i < thePeriodicSounds.children.length(); i = i + 1) { thePeriodicSounds.children[i].isActive = true; }
}

function AmbientAudioOn(Area)
{
    var n = 0;
    if(Area == "MAIN MENU") { n = 0; }
    else if(Area == "MEMORY") { n = 1; }
    else if(Area == "MUSIC") { n = 2; }
    else if(Area == "SETTINGS") { n = 3; }
    log("Picking ambient track " + (n + 1));
    for(var i = 0; i < theAmbientSounds.children.length(); i = i + 1) { theAmbientSounds.children[i].volume = 0; }
    theAmbientSounds.children[n].volume = 0.95;
    for(i = 0; i < thePeriodicSounds.children.length(); i = i + 1) { thePeriodicSounds.children[i].isActive = true; }
}

function AmbientAudioOff()
{
    log("Disabling ambient audio...");
    for(var i = 0; i < theAmbientSounds.children.length(); i = i + 1) { theAmbientSounds.children[i].volume = 0; }
    for(i = 0; i < thePeriodicSounds.children.length(); i = i + 1) { thePeriodicSounds.children[i].isActive = false; }
}

function DisableAmbientAudio()
{
    log("Disabling ambient audio...");
    for(var i = 0; i < theAmbientSounds.children.length(); i = i + 1) { theAmbientSounds.children[i].volume = 0; }
    for(i = 0; i < thePeriodicSounds.children.length(); i = i + 1) { thePeriodicSounds.children[i].isActive = false; }
}


DEF theGamesMenuIn AudioClip { url "audio/transition audio/games main menu in_lr.wav" volume 0.92 }
DEF theGamesMenuOut AudioClip { url "audio/transition audio/games main menu out_lr.wav" volume 0.92 }
DEF theGamesSubMenuIn AudioClip {url "audio/transition audio/games Sub Menu in_lr.wav" volume 0.92 }
DEF theGamesSubMenuOut AudioClip {url "audio/transition audio/games Sub Menu out_lr.wav" volume 0.92 }

DEF theMusicMenuIn AudioClip { url "audio/transition audio/music main menu in_lr.wav" volume 0.92 }
DEF theMusicMenuOut AudioClip { url "audio/transition audio/music main menu out_lr.wav" volume 0.92 }
DEF theMusicSubMenuIn AudioClip { url "audio/transition audio/music select track in_lr.wav" volume 0.92 }
DEF theMusicSubMenuOut AudioClip { url "audio/transition audio/music select track out_lr.wav" volume 0.92 }

DEF theSettingsMenuIn AudioClip { url "audio/transition audio/settings main menu in_lr.wav" volume 0.92 }
DEF theSettingsMenuOut AudioClip { url "audio/transition audio/settings main menu out_lr.wav" volume 0.92 }
DEF theSettingsSubMenuIn AudioClip { url "audio/transition audio/settings sub menu in_lr.wav" volume 0.92 }
DEF theSettingsSubMenuOut AudioClip { url "audio/transition audio/settings sub menu out_lr.wav" volume 0.92 }


DEF theCDExpand AudioClip { url "audio/music audio/music cd select.wav" volume 0.85 }
DEF thePlayerPanelIn AudioClip { url "audio/music audio/games info screen in msurr.wav" volume 0.92 }
DEF thePlayerPanelOut AudioClip { url "audio/music audio/games info screen out msurr.wav" volume 0.92 }


DEF theMainMenuForward AudioClip { url "audio/main audio/global main menufwd3ver2.wav" volume 0.90 }
DEF theMainMenuBackward AudioClip { url "audio/main audio/global main menuback3ver2.wav" volume 0.90 }
DEF theASound AudioClip { url "audio/main audio/global a button select.wav" pan 75 volume 0.92 }
DEF theBSound AudioClip { url "audio/main audio/global b button back.wav" pan -75 volume 0.92 }
DEF theMenuChangeSound AudioClip { url "audio/main audio/global scroll beep.wav" volume 0.85 }
DEF theErrorSound AudioClip { url "audio/main audio/global error message b.wav" volume 0.85 }
DEF theDeleteSound AudioClip { url "audio/main audio/global delete_destroy.wav" volume 0.85 }
DEF theProgressSound AudioClip { url "audio/main audio/global progress bar.wav" loop true volume 0.85 }
DEF theCompleteSound AudioClip { url "audio/main audio/global completion beep.wav" volume 0.85 }


DEF theMemoryControllerSelectSound AudioClip { url "audio/memory audio/memory controller select.wav" volume 0.90 }
DEF theMemoryTitleSelectSound AudioClip { url "audio/memory audio/memory games select.wav" volume 0.90 }
DEF theMemorySaveSelectSound AudioClip { url "audio/memory audio/memory memory slot select.wav" volume 0.90 }


DEF theSettingsLangSound AudioClip { url "audio/settings audio/settings lang submenu sel.wav" volume 0.90 }
DEF theSettingsParentSound AudioClip { url "audio/settings audio/settings parent submenu sel.wav" volume 0.90 }

function PlaySoundError()  		{ theErrorSound.Play(); 	 }
function PlaySoundDelete() 		{ theDeleteSound.Play(); 	 }
function PlaySoundA() 			{ theASound.Play(); 		 }
function PlaySoundB() 			{ theBSound.Play(); 		 }
function PlaySoundMenuChange() 	        { theMenuChangeSound.Play();     }


DEF theScreenSaver ScreenSaver
{
    function OnStart()
    {
	if(menuStyle == "MS")
	{
		if( dashStyle == "THC" & CurrentViewpoint == theMainMenuViewpoint ) { StartScreenSaverView(); }
		else { theScreen.brightness = 0.1; }
	}
	else { theBSXInline.children[0].EnterTestScreensaver(); }
    }

    function OnEnd()
    {
	if(menuStyle == "MS")
	{
		if(bInScreenSaverView) { StopScreenSaverView(); }
		else { theScreen.brightness = 1; }
	}
	else { theBSXInline.children[0].ExitTestScreensaver(); }
    }
	
    function OnDelay2() { if( dashStyle == "THC" ) { MainMenuPositionTwo();   } }
    function OnDelay3() { if( dashStyle == "THC" ) { MainMenuPositionThree(); } }
}

NavigationInfo
{
    type "sample"
    headlight false
}
DEF HighlightTexture ImageTexture { url "GameHilite_01.bmp" }


function GetLanguage() 		{ return theConfig.GetLanguage(); }
function SetLanguage(nLanguage) { return theConfig.SetLanguage(nLanguage); }

DEF theBackground Background
{

    skyColor 0 0 0
}


DEF theSkinBackground Background
{
    backdrop ImageTexture { url "background.bmp" }
    skyColor 0 0 0
}

function ClosePopup()
{
    if (g_bKeyboardDisplayed) 	{ CloseKeyboard(); }
    if (g_bPanelDisplayed) 	{ CloseMessage();  }
}

DEF theDVDPlayerInline Inline
{
    visible false
    url "dvd.xap"
    function onLoad() { theDVDPlayerInline.children[0].theDVDLevel.GoTo(); }
}

DEF theDiscDrive DiscDrive
{
	function OnDiscRemoved()
    	{
		answeredNo = false;
		RestoreDVDPanel();
		UpdateDVDIconStatus();

        	if (theDVDPlayerInline.visible)
        	{
            		bShowDVDStopBackground = false;
            		theDVDPlayerInline.children[0].theDVDPlayer.stop();
            		theDVDPlayerInline.children[0].ClearOnScreenInfo();

            		if (g_bPanelDisplayed) { CloseMessage(); }
            		theLauncherLevel.GoTo();
            		return;
        	}
        	else if (theMusicInline.visible)
        	{
            		var c = theMusicInline.children[0];
            		ClosePopup();
            		if (c.musicSelect != 0) { return; }
            		if (c.theMusicPlayMenu.visible)
            		{
                		c.DoMusicStop();
                		c.InitPlaylist();
                		c.UpdateTrackList();
            		}
            		else if (c.theMusicCopyMenu.visible)
            		{
                		c.theMusicCollection.error = 3;
                		c.OnMusicCopyComplete();
            		}
            		else if (c.theMusicMenu.visible) { c.UpdateMusicMetaData(); }
        	}
        	else { CloseMessage(); }
	}
	function OnDiscInserted() { AutoLaunchCheck(); }
}

function StartDVDPlayer()
{
    log("Starting the DVD player!");
    theDVDPlayerInline.visible = true;
}

function StartCDPlayer()
{
    log("Should start the CD player now!");
    bGoToCDPlayer = true;
    EnableInput(false); 
    GoToMusic();

}

DEF theMemoryMonitor MemoryMonitor
{
    function onLoad()
    {
	
    }

    function OnDeviceChange()
    {
		if( theMemoryMonitor.BeInMemoryMenu == true )
		{
        	if(theMemoryInline.children[0].theMemoryMenu.children[0].children.length() > 0)
            	theMemoryInline.children[0].UpdateDevices();
        }
    }

    function OnCurDevUnitChange()
    {
		if( theMemoryMonitor.BeInMemoryMenu == true )
		{
        	if (theMemoryInline.children[0].theMemoryMenu.children[0].children.length() > 0)
        	{
        	    theMemoryInline.children[0].UpdateDeviceHighlight();
        	    theMemoryInline.children[0].UpdateDeviceMetaData();
        	    theMemoryInline.children[0].UpdateDevices();
        	}
        }
    }

    function OnTotalFreeChanged()
    {
		if( theMemoryMonitor.BeInMemoryMenu == true )
		{
        	if (theMemoryInline.children[0].theMemoryMenu.children[0].children.length() > 0)
        	{
        	    theMemoryInline.children[0].UpdateDeviceMetaData();
        	    theMemoryInline.children[0].UpdateDevices();
        	}
        }
    }

    function OnInvalidMU(devUnit, fixed)
    {
		if( theMemoryMonitor.BeInMemoryMenu == true )
		{
        	var nGamePad = Math.floor(devUnit / 2);
        	var strUnit = "A";
        	if (nGamePad != devUnit / 2) { strUnit = "B"; }
        	var strName = theTranslator.Translate("memory unit") + " " + (nGamePad + 1) + strUnit + "\r";
        	if (fixed == 0) { strName = strName + theTranslator.Translate("AUTO FORMAT MU ERROR"); }
        	else {  strName = strName + theTranslator.Translate("AUTO FORMAT MU"); }
        	TellUser(strName, "theMemoryInline.children[0].ClearInvalidMU()");
        }
    }

    function OnInvalidMURemoved()
    {
		if( theMemoryMonitor.BeInMemoryMenu == true ) { CloseMessage(); }
    }
}

var nCurMainMenuItem;




function UpdateMainMenu()
{
   if(mainTabs == 5) { Update5ButtonMainMenu(); }
   if(mainTabs == 4) { Update4ButtonMainMenu(); }
   else if(mainTabs == 3) { Update3ButtonMainMenu(); }
}

function Update5ButtonMainMenu()
{
    var c = theMainMenu.children[0].children[0];
    c.game_select_pod_inner02.visible = false;    
    c.game_select_pod_inner.visible = false;        
    c.game_select_pod_inner04.visible = false;     
    c.game_select_pod_inner03.visible = false;
    c.game_select_pod_innerskins05.visible = false;

    if (nCurMainMenuItem == 0)  // Memory Button
    {
        c.game_select_pod_inner02.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, -0.25); }
        c.theMenuItems.SetRotation(0, 0, 1, -0.25);
        c.theMemoryItem.SetRotation(0, 1, 0, -0.25);
        c.theMusicItem.SetRotation(0, 1, 0, -0.25);
        c.theOnlineItem.SetRotation(0, 1, 0, -0.25);
        c.theSettingsItem.SetRotation(0, 1, 0, -0.25);
        c.theSkinsTab.SetRotation(0, 1, 0, -0.25);
        c.MemoryPanelMaterial.name = "GameHilite";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "HilightedType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "NavType";

    }
    else if (nCurMainMenuItem == 1)  // Music Button (Default position)
    {
        c.game_select_pod_inner.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.0);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.0);
        c.theMusicItem.SetRotation(0, 1, 0, 0.0);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.0);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.0);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.0);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "GameHilite";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "HilightedType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 2) // Xbox Live Button
    {
        c.game_select_pod_inner04.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.25); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.25);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.25);
        c.theMusicItem.SetRotation(0, 1, 0, 0.25);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.25);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.25);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.25);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "GameHilite";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "HilightedType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 3) // Settings Button
    {
        c.game_select_pod_inner03.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.50); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.50);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.50);
        c.theMusicItem.SetRotation(0, 1, 0, 0.50);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.50);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.50);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.50);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "GameHilite";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "HilightedType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 4) // Settings Button
    {
        c.game_select_pod_innerskins05.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.75); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.75);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.75);
        c.theMusicItem.SetRotation(0, 1, 0, 0.75);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.75);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.75);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.75);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "GameHilite";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "HilightedType";
    }
}

function Update4ButtonMainMenu()
{
    var c = theMainMenu.children[0].children[0];
    c.game_select_pod_inner02.visible = false;     
    c.game_select_pod_inner.visible = false;     
    c.game_select_pod_inner04.visible = false;     
    c.game_select_pod_inner03.visible = false; 

    if (nCurMainMenuItem == 0)  // Memory Button
    {
        c.game_select_pod_inner02.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, -0.25); }
        c.theMenuItems.SetRotation(0, 0, 1, -0.25);
        c.theMemoryItem.SetRotation(0, 1, 0, -0.25);
        c.theMusicItem.SetRotation(0, 1, 0, -0.25);
        c.theOnlineItem.SetRotation(0, 1, 0, -0.25);
        c.theSettingsItem.SetRotation(0, 1, 0, -0.25);
        c.theSkinsTab.SetRotation(0, 1, 0, -0.25);
        c.MemoryPanelMaterial.name = "GameHilite";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "HilightedType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 1)  // Music Button (Default position)
    {
        c.game_select_pod_inner.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.0);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.0);
        c.theMusicItem.SetRotation(0, 1, 0, 0.0);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.0);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.0);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.0);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "GameHilite";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "HilightedType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 2) // Xbox Live Button
    {
        c.game_select_pod_inner04.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.25); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.25);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.25);
        c.theMusicItem.SetRotation(0, 1, 0, 0.25);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.25);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.25);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.25);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "GameHilite";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "HilightedType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 3) // Settings Button
    {
        c.game_select_pod_inner03.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.50); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.50);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.50);
        c.theMusicItem.SetRotation(0, 1, 0, 0.50);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.50);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.50);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.50);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "GameHilite";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "HilightedType";
        c.skinsTabTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 4) // Skins Button
    {
        c.game_select_pod_innerskins05.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.75); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.75);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.75);
        c.theMusicItem.SetRotation(0, 1, 0, 0.75);
        c.theOnlineItem.SetRotation(0, 1, 0, 0.75);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.75);
        c.theSkinsTab.SetRotation(0, 1, 0, 0.75);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.skinsTabHiliteMaterial.name = "FlatSurfaces2sided";//GameHilite
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.OnlineTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
        c.skinsTabTextMaterial.name = "HilightedType";
    }
}

function Update3ButtonMainMenu()
{
    var c = theMainMenu.children[0].children[0];
    c.game_select_pod_inner02.visible = false;     
    c.game_select_pod_inner.visible = false;       
    c.game_select_pod_inner03.visible = false;  
    if (nCurMainMenuItem == 0)  // Memory Button
    {
        c.game_select_pod_inner02.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, -0.45); }
        c.theMenuItems.SetRotation(0, 0, 1, -0.45);
        c.theMemoryItem.SetRotation(0, 1, 0, -0.45);
        c.theMusicItem.SetRotation(0, 1, 0, -0.45);
        c.theSettingsItem.SetRotation(0, 1, 0, -0.45);
        c.MemoryPanelMaterial.name = "GameHilite";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "HilightedType";
        c.MusicTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 1)  // Music Button (Default position)
    {
        c.game_select_pod_inner.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.0);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.0);
        c.theMusicItem.SetRotation(0, 1, 0, 0.0);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.0);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "GameHilite";
        c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "HilightedType";
        c.SettingsTextMaterial.name = "NavType";
    }
    else if (nCurMainMenuItem == 2) // Settings Button
    {
        c.game_select_pod_inner03.visible = true;
		if( dashStyle != "Modded" & dashStyle != "THC" ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.45); }
        c.theMenuItems.SetRotation(0, 0, 1, 0.45);
        c.theMemoryItem.SetRotation(0, 1, 0, 0.45);
        c.theMusicItem.SetRotation(0, 1, 0, 0.45);
        c.theSettingsItem.SetRotation(0, 1, 0, 0.45);
        c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
        c.MusicPanelMaterial.name = "FlatSurfaces2sided";
        c.SettingsPanelMaterial.name = "GameHilite";
        c.MemoryTextMaterial.name = "NavType";
        c.MusicTextMaterial.name = "NavType";
        c.SettingsTextMaterial.name = "HilightedType";
    }
}

DEF theMainMenu Level
{
    archive "main_menu.xip"
    unloadable false

    children
    [
        Inline
        {
            url "main_menu/default.xap"

            function onLoad()
            {
				var c = theMainMenu.children[0].children[0];
		                c.Main_pod_backing03.SetAlpha(0);
				ApplyDashStyle();
				PanelCheck();

		                mainTabs = StringtoInteger( GetSavedValue("Main Menu Buttons","Number of Buttons") );
               if( mainTabs == 5 )
               {
                   c.Main_memory_ringpin_3.SetTranslation(62.779999, 13.892000, 102.000000);
                   c.Main_memory_ringpin_2.SetTranslation(56.830002, 33.290001, 101.900002);
                   c.Main_Online_ringpin.SetTranslation(62.779999, -6.092000, 102.000000);
                   c.Main_memory_ringpin_4.SetTranslation(57.430000, -24.379999, 101.500000);
                   c.theSkinsTab.visible = true;
               }
               if( mainTabs == 4 )
               {
                   c.Main_memory_ringpin_3.SetTranslation(62.779999, 13.892000, 102.000000);
                   c.Main_memory_ringpin_2.SetTranslation(56.830002, 33.290001, 101.900002);
                   c.Main_Online_ringpin.SetTranslation(62.779999, -6.092000, 102.000000);
                   c.Main_memory_ringpin_4.SetTranslation(57.430000, -24.379999, 101.500000);
                   c.theSkinsTab.visible = false;
               }
               else if( mainTabs == 3)
               {
                   c.Main_Online_ringpin.visible = false;
                   c.theSkinsTab.visible = false;
                   c.Main_memory_ringpin_3.SetTranslation(62.779999, 4.492000, 102.000000);
                   c.Main_memory_ringpin_2.SetTranslation(56.830002, 32.290001, 101.900002);
                   c.Main_memory_ringpin_4.SetTranslation(57.430000, -23.379999, 101.500000);
               }
                UpdateMainMenu();
                UpDateMainMenuButtonsText();
                MainMenuAttract();
		EnableAudio();


	        UpdateDVDIconStatus();
            }
        }
    ]

    shell Transform
    {
        scale 150 150 150
        translation 0 -20 80
        children
        [
            DEF theMainMenuSpinner Spinner
            {
				rpm 0
				axis 0 1 0
                children
                [
					DEF theMainMenuWaver Waver
					{
						rpm 2.25//rpm 0.75
						children
						[
							Shape
							{
								appearance Appearance
								{
									material MaxMaterial { name "InnerWall_01" }                    
									texture ImageTexture
									{
										alpha true
										url "cellwall.xbx"
									}
								}
								geometry USE theCellWallMesh
							}
							Shape
							{
								appearance Appearance { material MaxMaterial { name "InnerWall_02" } }
								geometry Sphere  { radius 1 }
							}
						]
					}
				]
			}
        ]
    }
    path USE theMainMenuViewpoint
	
    control DEF theMainMenuJoy Joystick
    {
       function OnADown()
       {
           if (RightTrigger == true & LeftTrigger == true) { QuickLaunch("A"); }
           else
           {
              var tabFunction;
	      var tab5;
              PlaySoundA();

              if(nCurMainMenuItem == 0) { theMusicMenuIn.Play(); }
              else { theSettingsMenuIn.Play(); }

              theMainMenu.children[0].children[0].select_pod_HL.children[0].appearance.material.param = 1;

	      tabFunction = GetSavedValue( "Main Menu Button " + (nCurMainMenuItem + 1) + " Settings","Launch" );
	      tab5 = GetSavedValue( "Main Menu Button 5 Settings","Launch" );


              if((mainTabs == 3) & (nCurMainMenuItem == 2)) { eval( tab5 ); }
              else if((mainTabs == 4) & (nCurMainMenuItem == 3)) { eval( tab5 ); }

              else { eval( tabFunction ); }
           }
       }
        function OnBDown()
        {
            if (RightTrigger == true & LeftTrigger == true) { QuickLaunch("B"); }
            else { GoToPowerOpts(); }
        }

        function OnXDown()
        {
            if (RightTrigger == true & LeftTrigger == true) { QuickLaunch("X"); }
            else if (RightTrigger == true) { MusicPlayerStop(); }
            else
            {
				previousControlType = theMainMenuJoy;
				StartControlPanel();
            }
        }

        function OnYDown()
        {
            if (RightTrigger == true & LeftTrigger == true) { QuickLaunch("Y"); }
	    else if (RightTrigger == false & LeftTrigger == true)
	    {
	    	if(b_InWireFrame)
		{
			theScreen.WireFrameStop();
			b_InWireFrame = false;
		}
		else
		{
			theScreen.WireFrameStart();
			b_InWireFrame = true;
		}
 	    }

        }

        function OnRightDown(){ RightTrigger = true;  }
        function OnRightUp()  { RightTrigger = false; }
        function OnLeftDown() { LeftTrigger = true;   }
        function OnLeftUp()   { LeftTrigger = false;  }

        function OnMenu()
        {

        }

	function OnLeftThumbDown()
	{
               	//theMusicPlayer.playbackMode = 0; 
               	//currentAlbum = 0;
               	//currentTrack = 0;
               	//MusicPlayerPlay();
		//DecideSkin();
        }

	function OnRightThumbMoveDown()
	{
	  		var c = theMainMenu.children[0].children[0];
	  		if(beInVis)
	  		{
                                CurrentViewpoint.isBound = true;

				if(dashStyle == "Modded"){ c.Modded_Orb.SetAlpha(1); }

		                c.Main_pod_backing03.SetAlpha(0);
		                c.main_pod1.fade = 0.25;
		                c.main_pod1.SetAlpha(1);
		                c.main_poda.fade = 0.25;
		                c.main_poda.SetAlpha(1);
		                c.main_podb.fade = 0.25;
		                c.main_podb.SetAlpha(1);
		                c.main_pod2.fade = 0.25;
		                c.main_pod2.SetAlpha(1);
		                c.Stock_Orb.fade = 0.25;
		                c.Stock_Orb.SetAlpha(1);
		                c.Main_memory_podsocket_inner02.fade = 0.25;
		                c.Main_memory_podsocket_inner02.SetAlpha(1);
		                c.Main_memory_podsocket_outer02.fade = 0.25;
		                c.Main_memory_podsocket_outer02.SetAlpha(1);
		                c.podsupport_ring.fade = 0.25;
		                c.podsupport_ring.SetAlpha(1);
		                c.Rotating_Large_X.fade = 0.25;
		                c.Rotating_Large_X.SetAlpha(1);

	    			beInVis = false;
	  		}
	  		else
	  		{
	    			mainSoundtrackViewpoint.isbound = true;

		                c.Main_pod_backing03.children[0].appearance.texture = audioVisualizer;
	    			c.Main_pod_backing03.fade = 0.75;
	    			c.Main_pod_backing03.SetAlpha(1);

				if(dashStyle == "Modded") { c.Modded_Orb.SetAlpha(0); }

		                c.main_pod1.fade = 0.75;
		                c.main_pod1.SetAlpha(0);
		                c.main_poda.fade = 0.75;
		                c.main_poda.SetAlpha(0);
		                c.main_podb.fade = 0.75;
		                c.main_podb.SetAlpha(0);
		                c.main_pod2.fade = 0.75;
		                c.main_pod2.SetAlpha(0);
		                c.Stock_Orb.fade = 0.75;
		                c.Stock_Orb.SetAlpha(0);
		                c.Main_memory_podsocket_inner02.fade = 0.75;
		                c.Main_memory_podsocket_inner02.SetAlpha(0);
		                c.Main_memory_podsocket_outer02.fade = 0.75;
		                c.Main_memory_podsocket_outer02.SetAlpha(0);
		                c.podsupport_ring.fade = 0.75;
		                c.podsupport_ring.SetAlpha(0);
		                c.Rotating_Large_X.fade = 0.75;
		                c.Rotating_Large_X.SetAlpha(0);

	    			beInVis = true;
	  		}
	}

        function OnMoveUp()
        {
            if (RightTrigger == true & LeftTrigger == false) { MusicPlayerFastForward(); }
            else
            {
               if (nCurMainMenuItem > 0)
               {
                   nCurMainMenuItem = nCurMainMenuItem - 1;
                   theMainMenuBackward.Play();
                   UpdateMainMenu();
               }
            }
        }


        function OnMoveDown()
        {
            if (RightTrigger == true & LeftTrigger == false) { MusicPlayerRewind(); }
            else
            {
               if (nCurMainMenuItem > 0)
               {
                   nCurMainMenuItem = nCurMainMenuItem + 1;
                   theMainMenuForward.Play();
                   UpdateMainMenu();
               }
            }
        }

        function OnLeftThumbMoveUp()
        {
            if (RightTrigger == true & LeftTrigger == false) { MusicPlayerFastForward(); }
            else
            {
               if (nCurMainMenuItem > 0)
               {
                   nCurMainMenuItem = nCurMainMenuItem - 1;
                   theMainMenuBackward.Play();
                   UpdateMainMenu();
               }
            }
        }

        function OnLeftThumbMoveDown()
        {
            if (RightTrigger == true & LeftTrigger == false) { MusicPlayerRewind(); }
            else
            {
               if (nCurMainMenuItem < mainTabs - 1)
               {
                   nCurMainMenuItem = nCurMainMenuItem + 1;
                   theMainMenuForward.Play();
                   UpdateMainMenu();
               }
            }
        }

	function OnRightThumbMoveLeft()
	{
            if(RightTrigger == true & LeftTrigger == false) { ChangeAlbumLeft(); }

	    else
	    {
		menuStyle = "BSX";



	    	GoToBSX();
	    }

	}


	function OnLeftThumbMoveRight()
	{
            if(RightTrigger == true & LeftTrigger == false) { ChangeAlbumRight(); }


	}
   }

    function OnActivate()
    {
		//theBackground.isBound = true;
		EnableAudio();
		CurrentViewpoint = theMainMenuViewpoint;
		//CurrentAltViewpoint = theMainMenuAlternateViewpoint;
	        //CurrentGameBoardAltViewpoint = theGameBoardAlternateViewpoint;
		UpdateDVDIconStatus();
    }
	    function OnArrival()
    {
		theSkinBackground.isBound = true;
    }
}
////UIX Lite Specific Variables///
var itemLaunchPath;
var itemLaunchXBE;
var menuStyle;
var infoPanelVis;
var fromSettings;
var currentStyle;
var customorb;
var DataFile; //create a global var to represent your data.xbx
var CurrentSavedDataSection; //create a gobal to represent cur main menu button data section
////UIX Lite Specific Variables///

var bBackToDVDPlayer;
var bGoToCDPlayer;
var bBackToLauncher;
var bShowErrorPanel;
var bShowInvalidDisc;
var bForceSetLanguage;
var bForceSetTimeZone;
var bForceSetClock;
var g_bKeyboardDisplayed;
var g_bPanelDisplayed;
var g_bAboutToReboot;
var bShowDVDStopBackground;
var bCleanupSpecifiedDrive;
var nSettingArea;
var g_nRec;

var mainTabs;
var b_InWireFrame;
var bInScreenSaverView;
var LeftTrigger;
var RightTrigger;
var RightThumb;
var LeftThumb;
var CurrentViewpoint;
var CurrentAltViewpoint;



//////Config Panel//////
var theInLine;
var currentControlType;
var previousControlType;
var ControlPanelOut;
//var bMusicPlayerReady;
var bPlayingCd;
var BGMon;
var currentMusicPlayerMode;
////////////////////
var defplaylistjoy;
////////////////////
//////Config Panel//////



var dashStyle;
var skinName;
var infoPanelVis;
var answeredNo;
var b_restart;
var b_dvd;
var bInMusicMenu;
var bTrackListVisible;
//var musicOnBoot;
var currentAlbum;
var currentTrack;

var bInGameBoardView;
//var CurrentGameBoardAltViewpoint;

var songtext;
var albumtext;

var beInVis;
var directchoice;

var tempstyle;
var thebsxcontrols;

var CheckOnce;









function initialize()
{
        beInVis = false;
        songtext = "";
        albumtext = "";
        bInGameBoardView = false;
        //ControlPanelOut = false;
	//infoPanelVis = true;

	//musicOnBoot = false;
	//BGMOn = false;
	CheckOnce = false;

	currentAlbum = 0;
	currentTrack = 0;

	///UIX Lite Specific Variable Options///
	DataFile = new Settings; //make the data.xbx for something you can use - a whole bunch of data :)
	DataFile.file = "Q:\\System\\config.ini";//simply tell it which file to use
        dashStyle = GetSavedValue("Dashboard Settings","Dash Style");
        menuStyle = GetSavedValue("Main Menu","MainMenuStyle"); 
	var skinName = GetSavedValue("Dashboard Settings","Current Skin");
	var cellwallvis = GetSavedValue("Dashboard Settings","Cellwall Visible");
	//theCellWallMesh.url = "Q:/skins/" + skinName + "/cellwall.xm"; 
	if(cellwallvis == "False") { theCellWallMesh.url = ""; }
	else { theCellWallMesh.url = "Q:/skins/" + skinName + "/cellwall.xm"; }
	//TitleMenu hate's everyone apparently. 
	//Uncomment FillMenuList and comment InitializeMenus, and replace "music_play_with_subs.xap" 
	//with the scripted version if your dash is failing to boot.
	//FillMenuList("games");
	InitializeMenus();
	answeredNo = false;



		
	var nLanguage = theConfig.GetLanguage();
	if (nLanguage != 0) nLanguage = nLanguage - 1;
			theTranslator.SetLanguage(nLanguage);

	bForceSetLanguage = theConfig.ForceSetLanguage();
	bForceSetTimeZone = theConfig.ForceSetTimeZone();
	bForceSetClock = theConfig.ForceSetClock();

	if ((bForceSetLanguage + bForceSetTimeZone + bForceSetClock) != false)
	{
		theDiscDrive.locked = true;
		BlockMemoryUnitInsert();
		EnableInput(true);
		GoToSettings();
		return;
	}

	EnableInput(true);
	b_InWireFrame = false;
	bInScreenSaverView = false;

	bBackToDVDPlayer = false;
	bGoToCDPlayer = false;
	bBackToLauncher = false;
	bShowErrorPanel = false;
	bShowInvalidDisc = false;
	nCurMainMenuItem = 1;
	g_bKeyboardDisplayed = false;
	g_bPanelDisplayed = false;
	g_bAboutToReboot = false;
	bShowDVDStopBackground = true;
	bCleanupSpecifiedDrive = false;
	nSettingArea = 0;
	g_nRec = 0;
	strMessageYesFunction = "";
	strMessageNoFunction = "";
	strKeyboardDoneFunction = "";
	strKeyboardCancelFunction = "";

	theAmbientSound0.Play();
	theAmbientSound1.Play();
	theAmbientSound2.Play();
	theAmbientSound3.Play();


	fromSettings = false;
	WaverCheck();
	GoToSkin();

}
///UIX Lite Initializations - Skin Subsystem reads which menu version is in play.///

function InitializeMS()
{
	currentStyle = "MS";
	MainInitPart3();
}
function InitializeBSX()
{
	currentStyle = "BSX";
	MainInitPart3();
}
///UIX Lite Initializations - Skin Subsystem reads which menu version is in play.///

function MainInitPart3()
{
    var reason = theConfig.GetLaunchReason();
    log("Launch reason: " + reason);

    if (reason == "Error")
    {
        EnableInput(true);
        //theMainMenu.GoTo();
	if(menuStyle == "MS") { theMainMenu.GoTo(); }
	else { GoToBSX(); }
	EnableAudio();
        bShowErrorPanel = true;
    }
    else if (reason == "Memory")
    {
        if (theConfig.CanDriveBeCleanup(theConfig.GetLaunchParameter1())) { bCleanupSpecifiedDrive = true; }
        bBackToLauncher = true;
        EnableInput(true);
	EnableAudio();
        GoToMemory();
    }
    else if (reason == "Settings")
    {
        bBackToLauncher = true;
        nSettingArea = theConfig.GetLaunchParameter1();
        EnableInput(true);
	EnableAudio();
        GoToSettings();
    }
    else if (reason == "Music")
    {
        bBackToLauncher = true;
        EnableInput(true);
	EnableAudio();
        GoToMusic();
    }
    else if (theDiscDrive.discType == "Video")
    {
        EnableInput(true);
        //StartDVDPlayer();
		
		b_dvd = true;
		theLauncherLevel.GoTo(); 
    }
    else if (theDiscDrive.discType == "Audio")
    {
        nCurMainMenuItem = 1;
        StartCDPlayer();
    }
    else if (theDiscDrive.discType == "Title") { theLauncherLevel.GoTo(); }
    else
    {
        EnableInput(true);
        if (theDiscDrive.discType == "unknown") { bShowInvalidDisc = true; }
	if(menuStyle == "MS") { theMainMenu.GoTo(); }
	else { GoToBSX(); }
	EnableAudio();
    }
}







DEF theJapaneseKeyboardLayer Layer
{
    visible false
    transparency 1
    fade 0.25

    viewpoint Viewpoint
    {
        fieldOfView 1.2
		position 10 9 145
    }

    children
    [
        DEF theJapaneseKeyboardTransform Transform
        {
            fade 0.25
//          fade 1
            scale 0 0 0
            children
            [
                Inline
                {
                    preload true
                    url "jkeyboard/default.xap"
                }
            ]
        }
    ]
}

var strKeyboardTitle, strKeyboardEdit;
var strKeyboardDoneFunction, strKeyboardCancelFunction;

DEF theKeyboardLayer Layer
{
    visible false
    transparency 1
    fade 0.25

    viewpoint Viewpoint
    {
        fieldOfView 1.2
        position 10 6 150
    }

    children
    [
        DEF theKeyboardTransform Transform
        {
            fade 0.25
            scale 0 0 0
            children
            [
                Inline
                {
                    preload true
                    url "keyboard/default.xap"
                }
            ]
        }
    ]
}

function KeyboardDone()
{
    var strDoneFunction = strKeyboardDoneFunction;

    CloseKeyboard();
	if(strDoneFunction != "") { eval(strDoneFunction); }
}

function KeyboardCancel()
{
    var strCancelFunction = strKeyboardCancelFunction;

    CloseKeyboard();
    if(strCancelFunction != "") { eval(strCancelFunction); }
}

function CloseKeyboard()
{
    if (g_bKeyboardDisplayed == false) { return; }

	var nKeyboardLanguage = theConfig.GetLanguage();
	if (nKeyboardLanguage == 2)  // Japanese Language
	{
		var c = theJapaneseKeyboardTransform.children[0].children[0];
	    strKeyboardEdit = c.theJKeyboard.string;
	    c.theJKeyboardJoystick.isBound = false;
		
		theJapaneseKeyboardTransform.SetScale(0, 0, 0);
		theJapaneseKeyboardTransform.SetAlpha(0);
		theJapaneseKeyboardLayer.transparency = 1;
	}
	else
	{
		var c = theKeyboardTransform.children[0].children[0];
		strKeyboardEdit = c.theKeyboard.string;
		c.theKeyboardJoystick.isBound = false;

		theKeyboardTransform.SetScale(0, 0, 0);
		theKeyboardTransform.SetAlpha(0);
		theKeyboardLayer.transparency = 1;
	}

    strKeyboardTitle = "";
    strKeyboardDoneFunction = "";
    strKeyboardCancelFunction = "";

    if (theDiscDrive.locked) { theDiscDrive.locked = false; }
    UnblockMemoryUnitInsert();

    g_bKeyboardDisplayed = false;
    if(rename)
    {
		ShowFileManagerFunctions();
		ConfirmFileManager( "Rename:\n" + renameEdit, "To:\n" + strKeyboardEdit);
    }
    if(create)
    {
		ShowFileManagerFunctions();
		ConfirmFileManager( "Create Folder:\n" + strKeyboardEdit, "");
    }
}

function ShowKeyboard(strTitle, strEdit, strDoneFunction, strCancelFunction)
{
    theDiscDrive.locked = true;
    BlockMemoryUnitInsert();

    strKeyboardTitle = strTitle;
    strKeyboardEdit = strEdit;
    strKeyboardDoneFunction = strDoneFunction;
    strKeyboardCancelFunction = strCancelFunction;

	var nKeyboardLanguage = theConfig.GetLanguage();
	if (nKeyboardLanguage == 2)  // Japanese Language
	{
		var c = theJapaneseKeyboardTransform.children[0].children[0];
		c.theJKeyboard.selectKey( 8, 10 );        // Default the key selection to the DONE key
		c.theJKeyboard.string = "";
		c.theJKeyboard.string = strKeyboardEdit;
		c.theJKeyboard.shift = 0;
		c.theJKeyboard.caps = 0;
		c.theJKeyboard.jmode = 0;

		c.theKeyboardTitle.text = strKeyboardTitle;
		if (g_bKeyboardDisplayed == false) { c.theJKeyboardJoystick.isBound = true; }
		theJapaneseKeyboardLayer.visible = true;
		theJapaneseKeyboardLayer.transparency = 0.25;
		theJapaneseKeyboardTransform.SetScale(1, 1, 1);
		theJapaneseKeyboardTransform.SetAlpha(1);
	}
	else
	{
		var c = theKeyboardTransform.children[0].children[0];
		c.theKeyboard.selectKey( 0, 0 );        // Default the key selection to the DONE key
		c.theKeyboard.string = "";
		c.theKeyboard.string = strKeyboardEdit;
		c.theKeyboard.shift = 0;
		c.theKeyboard.caps = 0;
		c.theKeyboard.mode = 0;

		c.theKeyboardTitle.text = strKeyboardTitle;
		if (g_bKeyboardDisplayed == false) { c.theKeyboardJoystick.isBound = true; }
		theKeyboardLayer.visible = true;
		theKeyboardLayer.transparency = 0.25;
		theKeyboardTransform.SetScale(1, 1, 1);
		theKeyboardTransform.SetAlpha(1);
	}

    g_bKeyboardDisplayed = true;
}

DEF theMessageLayer Layer
{
    fade 0.25
    transparency 1

    viewpoint Viewpoint
    {
        fieldOfView 0.602400
        orientation 0.000000 -1.000000 0.000000 -0.003534
        position 0.424700 0.000000 6.052000
    }

    children
    [
        Transform
        {
            children
            [
                DEF theMessageInline Inline
                {
                    preload true
                    url "message/default.xap"

                    function onLoad()
                    {
                        var c = children[0];
                        c.button_yes.visible = false;
                        c.button_no.visible = false;
                        c.button_center.visible = false;
                        c.slider_slot.visible = false;
                        c.slider.visible = false;

                        if (bShowErrorPanel)
                        {
                            var e = theConfig.GetLaunchParameter1();
                            bShowErrorPanel = false;
                            if(e == 2) { TellUser("ERROR MESSAGE 2", "theMainMenu.GoTo()"); }
                            else { BlockUser("ERROR MESSAGE " + e); }
                        }
                        else if (bShowInvalidDisc)
                        {
                            if (theDiscDrive.discType == "unknown") { BlockUser("ERROR MESSAGE 1"); }
                        }
                    }
                }
            ]
        }
    ]
}

var strMessageText;
var strMessageYesFunction;
var strMessageNoFunction;
var nCurMessageButton;
var nMessageButtonCount;

function UpdateMessageButtonHighlight()
{
    var c = theMessageInline.children[0];

    if (nCurMessageButton == 0)
    {
        c.button_yes.children[0].appearance.material.name = "GameHilite";
        c.text_yes.children[0].appearance.material.name = "Material #133";
        c.button_no.children[0].appearance.material.name = "FlatSurfaces";
        c.text_no.children[0].appearance.material.name = "NavType";
    }
    else
    {
        c.button_yes.children[0].appearance.material.name = "FlatSurfaces";
        c.text_yes.children[0].appearance.material.name = "NavType";
        c.button_no.children[0].appearance.material.name = "GameHilite";
        c.text_no.children[0].appearance.material.name = "Material #133";
    }
}

DEF theMessageJoystick Joystick
{
    function OnADown()
    {
        if (nCurMessageButton != -1)
        {
            PlaySoundA();
            if(nCurMessageButton == 0) { OnQuestionYes(); }
            else { OnQuestionNo(); }
        }
    }

    function OnBDown()
    {
        if (nMessageButtonCount == 1)
        {
            OnADown();
            return;
        }

        if (nCurMessageButton != -1)
        {
            PlaySoundB();
            nCurMessageButton = 1;
            UpdateMessageButtonHighlight();
            OnQuestionNo();
        }
    }

    function OnMoveLeft()
    {
        if (nMessageButtonCount < 2) { return; }
        if (nCurMessageButton == 1)
        {
            PlaySoundMenuChange();
            nCurMessageButton = 0;
            UpdateMessageButtonHighlight();
        }
    }

    function OnLeftThumbMoveLeft()
    {
        if (nMessageButtonCount < 2) { return; }
        if (nCurMessageButton == 1)
        {
            PlaySoundMenuChange();
            nCurMessageButton = 0;
            UpdateMessageButtonHighlight();
        }
    }

    function OnMoveRight()
    {
        if (nMessageButtonCount < 2) { return; }
        if (nCurMessageButton == 0)
        {
            PlaySoundMenuChange();
            nCurMessageButton = 1;
            UpdateMessageButtonHighlight();
        }
    }

    function OnLeftThumbMoveRight()
    {
        if (nMessageButtonCount < 2) { return; }
        if (nCurMessageButton == 0)
        {
            PlaySoundMenuChange();
            nCurMessageButton = 1;
            UpdateMessageButtonHighlight();
        }
    }
}

function AskQuestion(strQuestion, strYesFunction, strNoFunction, nDefaultButton)
{
    theDiscDrive.locked = true;
    BlockMemoryUnitInsert();

    var c = theMessageInline.children[0];

    c.MessagePanel.SetRotation(0, 0, 1, 0);
    c.MessagePanel.SetAlpha(1);

    strMessageText = strQuestion;
    strMessageYesFunction = strYesFunction;
    strMessageNoFunction = strNoFunction;

    c.button_yes.visible = true;
    c.button_no.visible = true;
    c.button_center.visible = false;
    c.slider_slot.visible = false;
    c.slider.visible = false;

    c.MessageText.text = strQuestion;

    nCurMessageButton = nDefaultButton;
    nMessageButtonCount = 2;
    UpdateMessageButtonHighlight();

    if (g_bPanelDisplayed == false) { theMessageJoystick.isBound = true; }

    theMessageLayer.transparency = 0.25;

    g_bPanelDisplayed = true;
}

function TellUser(strMessage, strDoneFunction)
{
    theDiscDrive.locked = true;
    BlockMemoryUnitInsert();

    var c = theMessageInline.children[0];

    c.MessagePanel.SetRotation(0, 0, 1, 0);
    c.MessagePanel.SetAlpha(1);

    strMessageText = strMessage;
    strMessageYesFunction = strDoneFunction;
    strMessageNoFunction = strDoneFunction;

    c.button_yes.visible = false;
    c.button_no.visible = false;
    c.button_center.visible = true;
    c.slider_slot.visible = false;
    c.slider.visible = false;

    c.MessageText.text = strMessage;

    nCurMessageButton = 0;
    nMessageButtonCount = 1;
    UpdateMessageButtonHighlight();

    if (g_bPanelDisplayed == false) { theMessageJoystick.isBound = true; }

    theMessageLayer.transparency = 0.25;

    g_bPanelDisplayed = true;
}

function BlockUser(strMessage)
{
    BlockMemoryUnitInsert();

    var c = theMessageInline.children[0];

    c.MessagePanel.SetRotation(0, 0, 1, 0);
    c.MessagePanel.SetAlpha(1);

    strMessageText = strMessage;
    strMessageYesFunction = "";
    strMessageNoFunction = "";

    c.button_yes.visible = false;
    c.button_no.visible = false;
    c.button_center.visible = false;
    c.slider_slot.visible = false;
    c.slider.visible = false;

    c.MessageText.text = strMessage;

    nCurMessageButton = -1;
    nMessageButtonCount = 0;
    UpdateMessageButtonHighlight();

    if (g_bPanelDisplayed == false) { theMessageJoystick.isBound = true; }

    theMessageLayer.transparency = 0.25;

    g_bPanelDisplayed = true;
}

function ShowProgress(strMessage)
{
    theDiscDrive.locked = true;
    BlockMemoryUnitInsert();

    var c = theMessageInline.children[0];

    c.MessagePanel.SetRotation(0, 0, 1, 0);
    c.MessagePanel.SetAlpha(1);

    c.button_yes.visible = false;
    c.button_no.visible = false;
    c.button_center.visible = false;
    c.slider_slot.visible = true;
    c.slider.visible = true;
    c.MessageText.text = strMessage;

    SetProgress(0);
    nCurMessageButton = -1;
    nMessageButtonCount = 0;

    theMessageJoystick.isBound = true;
    theMessageLayer.transparency = 0.25;
    g_bPanelDisplayed = true;
}

function UpdateProgressText(strMessage)
{
    var c = theMessageInline.children[0];
    c.MessageText.text = strMessage;
}

function SetProgress(nProgress)
{
    var nTempProgress = (nProgress * 1.665) - 0.165;
    var c = theMessageInline.children[0];
    c.slider.children[0].appearance.material.param = nTempProgress;
}

function CloseMessage()
{
    if (g_bPanelDisplayed == false) { return; }

    var c = theMessageInline.children[0];

    c.MessagePanel.SetRotation(0, 0, 1, 1.5);
    c.MessagePanel.SetAlpha(0.0);

    theMessageJoystick.isBound = false;
    theMessageLayer.transparency = 1;

    strMessageText = "";
    strMessageYesFunction = "";
    strMessageNoFunction = "";

    if (theProgressSound.transportMode != 0) { theProgressSound.Stop(); }
    theCompleteSound.Play();

    theDiscDrive.locked = false;
    UnblockMemoryUnitInsert();
    g_bPanelDisplayed = false;
}

function OnQuestionYes()
{
    var strYesFunction = strMessageYesFunction;
    CloseMessage();
    if(strYesFunction != "") { eval(strYesFunction); }
}

function OnQuestionNo()
{
    var strNoFunction = strMessageNoFunction;
    CloseMessage();
    if(strNoFunction != "") {  eval(strNoFunction); }
}

DEF theXboxLogo4x3Background Background
{
    skyColor 0 0 0
    backdrop ImageTexture { url "xboxlogo.bmp" }
}

DEF theXboxLogo16x9Background Background
{
    skyColor 0 0 0
    backdrop ImageTexture { url "xboxlogow.bmp" }
}

DEF theLauncherLevel Level
{
    function OnArrival()
    {
        DisableAmbientAudio();
        BlockMemoryUnitEnumeration();
        ClosePopup();
        g_bAboutToReboot = true;
        if(theConfig.GetVideoMode() == 2) { theXboxLogo16x9Background.isBound = true; }
        else { theXboxLogo4x3Background.isBound = true; }
    }

    behavior
    {
        sleep 1.1;
        if(g_bAboutToReboot)
        {
			if( b_restart == true ) { theConfig.BackToLauncher(); }
			else if( b_dvd == true ) { StartDVDPlayer(); }
			else { theDiscDrive.LaunchDisc(); }
        }
    }

    function OnActivate()
    {
        DisableAmbientAudio();
        BlockMemoryUnitEnumeration();
        ClosePopup();
        //EnableInput(false);
        if(theConfig.GetVideoMode() == 2) { theXboxLogo16x9Background.isBound = true; }
        else { theXboxLogo4x3Background.isBound = true; }
    }
}

function BlockMemoryUnitInsert()
{
    if (theMemoryInline.Visible) { theMemoryInline.children[0].theMemoryMonitor.blockInsertion = true; }
}

function UnblockMemoryUnitInsert()
{
    if (theMemoryInline.Visible) { theMemoryInline.children[0].theMemoryMonitor.blockInsertion = false; }
}

function BlockMemoryUnitEnumeration()
{
    if (theMemoryInline.Visible) { theMemoryInline.children[0].theMemoryMonitor.enumerationOn = false; }
}

function UnblockMemoryUnitEnumeration()
{
    if (theMemoryInline.Visible) { theMemoryInline.children[0].theMemoryMonitor.enumerationOn = false; }
}

function ReturnInteger( x )
{
    var a = x;
    var b = Math.abs(a);
    if(a.charCodeAt(0) == 45)
    {
        var c = b * 2;
        b = b - c;
    }
    return b;
}

//function EnableCurrentAlternateViewpoint() { CurrentAltViewpoint.isBound = true; }
function EnableCurrentAlternateViewpoint() { theMainMenuAlternateViewpoint.isBound = true; }
//function DisableCurrentAlternateViewpoint() { theMainMenuAlternateViewpoint.isBound = false; }
function DisableCurrentAlternateViewpoint() { CurrentViewpoint.isBound = true; }

DEF theMainMenuAlternateViewpoint Viewpoint
{
	fieldOfView 1.755000
	orientation -0.177400 -1.983500 -0.036250 -0.045440
	position -15.180000 -112.299999 174.300003
	jump false
}

function EnableAudio()
{
	//if(( theMusicPlayer.transportMode != 1) | (BGMOn != true )) { EnableAmbientAudio(); }
	if(theMusicPlayer.transportMode != 1) { EnableAmbientAudio(); }
}

var nCurManagerButton;
var nManagerButtonCount;
var nCurFMButton;
var nFmDefaultButton;
var nFMButtonCount;
var bInConfirm;
var rename;
var renameText;
var renameEdit;
var renameDone;
var renameCancel;
var goToKeyboard;
var inError;
var create;

DEF theFileManagerLayer Layer
{
    fade 0.25
    transparency 1
    viewpoint Viewpoint
    {
        fieldOfView 0.602400
        orientation 0.000000 -1.000000 0.000000 -0.003534
        position 0.424700 0.000000 6.052000
    }
    children
    [
        Transform
        {
            children
            [
                DEF theFileManagerLayerInline Inline
                {
                    preload true
                    url "message/default2.xap"

                    function onLoad()
                    {
                        var c = children[0];
                        c.button_yes.visible = false;
                        c.button_no.visible = false;
                        c.button_center.visible = false;
                        c.slider_slot.visible = false;
                        c.slider.visible = false;
                    }
                }
            ]
        }
    ]
}

function ShowFileManagerFunctions()
{
    bInConfirm = false;
    goToKeyboard = false;
    var c = theFileManagerLayerInline.children[0];
    c.MessagePanel.SetRotation(0, 0, 1, 0);
    c.MessagePanel.SetAlpha(1);
    c.button_yes.visible = false;
    c.button_no.visible = false;
    c.button_center.visible = false;
    c.slider_slot.visible = false;
    c.slider.visible = false;
    c.MessageText1.text = "Copy";
    c.MessageText2.text = "Move";
    c.MessageText3.text = "Delete";
    c.MessageText4.text = "Rename";
    c.MessageText5.text = "New Folder";
    if(rename) { nCurManagerButton = 3; }
    else if(create) { nCurManagerButton = 4; }
    else  { nCurManagerButton = 0; }
    nManagerButtonCount = 4;
    UpdateFileManagerFunctionsMenu();
    if (g_bPanelDisplayed == false) { theFileManagerInline.children[0].theFileManagerJoystick.isBound = true; }
    theFileManagerLayer.transparency = 0.25;
    g_bPanelDisplayed = true;
}

function UpdateFileManagerButtonHighlight()
{
    var c = theFileManagerLayerInline.children[0];
    if (nCurFMButton == 0)
    {
        c.button_yes.children[0].appearance.material.name = "GameHilite";
        c.text_yes.children[0].appearance.material.name = "Material #133";
        c.button_no.children[0].appearance.material.name = "FlatSurfaces";
        c.text_no.children[0].appearance.material.name = "NavType";
    }
    else
    {
        c.button_yes.children[0].appearance.material.name = "FlatSurfaces";
        c.text_yes.children[0].appearance.material.name = "NavType";
        c.button_no.children[0].appearance.material.name = "GameHilite";
        c.text_no.children[0].appearance.material.name = "Material #133";
    }
}

function ConfirmFileManager( x, y )//text 1, text 2
{
    bInConfirm = true;
    rename = false;
    create = false;
    var c = theFileManagerLayerInline.children[0];
    var text1 = x;
    var text2 = y;
    c.button_yes.visible = true;
    c.button_no.visible = true;
	c.message_Text01.children[0].children[0].appearance.material.name = "CellEgg/Partsz";
    c.MessageText1.text = text1 + "\n" + text2;
    c.MessageText2.text = "";
    c.MessageText3.text = "";
    c.MessageText4.text = "";
    c.MessageText5.text = "";
    nCurFMButton = 1;
    nFMButtonCount = 2;
    UpdateFileManagerButtonHighlight();
}

function ShowFileManagerError()
{
	inError = true;
	var c = theFileManagerLayerInline.children[0];
	c.message_Text02.children[0].children[0].appearance.material.name = "CellEgg/Partsz";
    c.MessageText1.text = "";
    c.MessageText2.text = "You Must Select A Destination Folder";
    c.MessageText3.text = "";
    c.MessageText4.text = "";
    c.MessageText5.text = "";
}

function CloseFileManagerFunctions()
{
    if (g_bPanelDisplayed == false) { return; }
    var c = theFileManagerLayerInline.children[0];
    c.MessagePanel.SetRotation(0, 0, 1, 1.5);
    c.MessagePanel.SetAlpha(0.0);
    theFileManagerJoystick.isBound = false;
    theFileManagerLayer.transparency = 1;
    g_bPanelDisplayed = false;
    if(goToKeyboard)
    {
		if(nCurManagerButton == 3) { rename = true; }
		else { create = true; }
		ShowKeyboard( renameText, renameEdit, renameDone, renameCancel);
    }
}

function UpdateFileManagerFunctionsMenu()
{
	var c = theFileManagerLayerInline.children[0];
	c.message_Text01.children[0].children[0].appearance.material.name = "NavType";
	c.message_Text02.children[0].children[0].appearance.material.name = "NavType";
	c.message_Text03.children[0].children[0].appearance.material.name = "NavType";
	c.message_Text04.children[0].children[0].appearance.material.name = "NavType";
	c.message_Text05.children[0].children[0].appearance.material.name = "NavType";
	
		 if(nCurManagerButton == 0) { c.message_Text01.children[0].children[0].appearance.material.name = "RedType"; }
	else if(nCurManagerButton == 1) { c.message_Text02.children[0].children[0].appearance.material.name = "RedType"; }
	else if(nCurManagerButton == 2) { c.message_Text03.children[0].children[0].appearance.material.name = "RedType"; }
	else if(nCurManagerButton == 3) { c.message_Text04.children[0].children[0].appearance.material.name = "RedType"; }
	else if(nCurManagerButton == 4) { c.message_Text05.children[0].children[0].appearance.material.name = "RedType"; }
}

function SetFanSpeed() //Exiles
{
	var IniFile = new Settings;
	IniFile.SetIniSection( "Sys Config" );
	var FanSpeedST = IniFile.GetIniValue( "FanSpeed" );
	IniFile.CloseIniFile();

	var FanSpeedS = ReturnInteger(FanSpeedST);
	if (FanSpeedS==20) { theConfig.SetFanSpeed(20); }
	else if (FanSpeedS==30) { theConfig.SetFanSpeed(30); }
	else if (FanSpeedS==40) { theConfig.SetFanSpeed(40); }
	else if (FanSpeedS==50) { theConfig.SetFanSpeed(50); }
	else if (FanSpeedS==60) { theConfig.SetFanSpeed(60); }
	else if (FanSpeedS==70) { theConfig.SetFanSpeed(70); }
	else if (FanSpeedS==80) { theConfig.SetFanSpeed(80); }
	else if (FanSpeedS==90) { theConfig.SetFanSpeed(90); }
	else if (FanSpeedS==100) { theConfig.SetFanSpeed(100); }
	else { theConfig.SetFanSpeed(100); }
}

function WaverCheck()
{	

	var a = GetSavedValue( "Dashboard Settings","Dash Waver" );	
	if( a == "True" ) { theScreen.MotionStart(); }
	else if( a == "False" ) { theScreen.MotionStop(); }
}

//All credit to imokruok for below drive functions!
function FormatDriveSpace(Drive, spaceType) //DORN CHANGE
{
    var driveSpace;
    if( spaceType == "free" ) { driveSpace = Math.round(theHardDrive.GetFreeSpace(Drive));}
    else { driveSpace = Math.round(theHardDrive.GetTotalSpace(Drive));  }
    var a, b;

    var tf_gb_mb = driveSpace / 1000;
    var tf_gb = Math.round(tf_gb_mb);
    if (tf_gb_mb - tf_gb < 0) { tf_gb = tf_gb - 1; }
    else { tf_gb = tf_gb; }

    var tf_mb = (tf_gb_mb - tf_gb) * 100; 
    var tf_mb_r = Math.round(tf_mb);
    if (tf_mb - tf_mb_r < 0) { tf_mb_r = tf_mb_r - 1; }
    else { tf_mb_r = tf_mb_r; }

    if( tf_gb < 1 )
    {
             if( spaceType == "free" ) { a = ( tf_mb_r * 10 ) + "MB"; return a; }
        else if( spaceType == "total" ) { b = ( tf_mb_r * 10 ) + "MB"; return b; }
    }
    else if( tf_gb >= 1 )
    {
             if( spaceType == "free" ){ a = tf_gb + "." + tf_mb_r + "GB"; return a;}
        else if( spaceType == "total" ){b = tf_gb + "." + tf_mb_r + "GB"; return b;}
    }
}

function Format2DriveSpace(Drive, Drive1, spaceType)
{
    var driveSpace;
    if( spaceType == "free" )
    {
   	driveSpace = Math.round(theHardDrive.GetFreeSpace(Drive));
	driveSpace = driveSpace + Math.round(theHardDrive.GetFreeSpace(Drive1));
    }
    else
    {
	driveSpace = Math.round(theHardDrive.GetTotalSpace(Drive));
	driveSpace = driveSpace + Math.round(theHardDrive.GetTotalSpace(Drive1));
    }
    var a, b;

    var tf_gb_mb = driveSpace / 1000;
    var tf_gb = Math.round(tf_gb_mb);
    if (tf_gb_mb - tf_gb < 0) { tf_gb = tf_gb - 1; }
    else { tf_gb = tf_gb; }

    var tf_mb = (tf_gb_mb - tf_gb) * 100; 
    var tf_mb_r = Math.round(tf_mb);
    if (tf_mb - tf_mb_r < 0) { tf_mb_r = tf_mb_r - 1; }
    else { tf_mb_r = tf_mb_r; }

    if( tf_gb < 1 )
    {
             if( spaceType == "free" ) { a = ( tf_mb_r * 10 ) + "MB"; return a; }
        else if( spaceType == "total" ) { b = ( tf_mb_r * 10 ) + "MB"; return b; }
    }
    else if( tf_gb >= 1 )
    {
             if( spaceType == "free" ){ a = tf_gb + "." + tf_mb_r + "GB"; return a;}
        else if( spaceType == "total" ){b = tf_gb + "." + tf_mb_r + "GB"; return b;}
    }
}

function QuickLaunch(x)
{

	var button = x;

	var a = GetSavedValue("Quick Launch","Quick Launch " + button);

	var launchPath;

	var b = a.substr(0,1);
	var c = a.indexOf("\\");
	var d = a.lastIndexOf("\\");
	var e;
	
	if(d > 4)
	{
      e = "\\" + a.substr(c + 2, d - 5);
	}
	else { e = ""; }
	
	var launchXbe = a.substr(d + 1);
	
	     if(b == "F") { launchPath = "\\Device\\Harddisk0\\Partition6" + e; }
	else if(b == "C") { launchPath = "\\Device\\Harddisk0\\Partition2" + e; }
	else if(b == "G") { launchPath = "\\Device\\Harddisk0\\Partition7" + e; }
	else if(b == "E") { launchPath = "\\Device\\Harddisk0\\Partition1" + e; }
	else { return; }
	
	launch (launchXbe, launchPath);
}

function PanelCheck()
{	

	var a = GetSavedValue("Dashboard Settings","Info Panel");

        //var c = theMainMenu.children[0].children[0];
	var c = DefineVarC();
	
	if( a == "True" ) { infoPanelVis = true; }
	else if( a == "False") 
	{
		infoPanelVis = false;
		c.Information_panel.visible = false;
	}
}
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////BEGIN INFO PANEL FUNCTIONS ////////////////////////////////
function ToggleInfoPanel()
{
	//var c = theMainMenu.children[0].children[0];
	var c = DefineVarC();
	if(infoPanelVis == true)
	{
		if(menuStyle == "MS") { c.Information_panel.SetTranslation(-250,-110,5); }
		else { c.Information_panel.SetTranslation(-235,-100,-45); }
	 	infoPanelVis = false;
	}
	else if(infoPanelVis == false)
	{
		//c.Information_panel.visible = true;
		if(menuStyle == "MS") { c.Information_panel.SetTranslation(-105,-110,5); }
		else { c.Information_panel.SetTranslation(-250,-110,5); }
	 	infoPanelVis = true;
	}
}


DEF theDVDPanelJoy Joystick
{
	function OnADown()
	{
		answeredNo = true;
		if(theDiscDrive.discType == "Video") { theDiscDrive.LaunchDisc(); }
		else if(theDiscDrive.discType == "Audio")
		{
			//theMainMenu.children[0].children[0].DVDStatusIconTexture.url = "dvdempty.xbx";
			RestoreDVDPanel(); //UpdateDVDIconStatus();
			//MusicPlayerStop();
			DisableAmbientAudio();
	                if (theMusicInline.visible == false)
                        {
            	        	ClosePopup();
                                nCurMainMenuItem = 1;   // select music when backing up
                                StartCDPlayer();
                                return;
                        }
                        var c = theMusicInline.children[0];
            		if (c.theMusicPlayMenu.visible) // We are in the music play menu
            		{
                		if (c.musicSelect == 0) // Already in audio CD player
                		{
                    			if (c.bMusicMenuVisible)
                    			{
                        			c.theMusicPlayMenu.GoTo();
                        			c.StartMusicPlayer();
                        			c.DoMusicPlayPause();
                    			}
                    			else
                    			{
                        			c.DoMusicStop();
                        			c.InitPlaylist();
                        			c.UpdateTrackList();
                        			if (c.visualizerViewpoint.isBound)
                            			c.DoMusicPlayPause();
                    			}
               			}
                		else if (c.theMusicPlayer.transportMode != 1) // Let's play the disc if no soundtrack is playing
                		{
                    			bGoToCDPlayer = true;
                    			EnableInput(false);
                    			c.theMusicMenu.GoBackTo();
                		}
            		}
            		else if (c.theMusicMenu.visible == true)
            		{
                		ClosePopup();
                		bGoToCDPlayer = true;
                		EnableInput(false);
                		c.StartMusicLevel();
            		}
            		else
            		{
               			ClosePopup();
               			bGoToCDPlayer = true;
                		EnableInput(false);
                		c.theMusicMenu.GoTo();
            		}
		}
		else if(theDiscDrive.discType == "Title") { theDiscDrive.LaunchDisc(); }
		else if(theDiscDrive.discType == "unknown") { LaunchXBMC(); }
		//TellUser("launch unknown", "theMainMenu.GoTo()");
	}

	function OnBDown()
	{
		answeredNo = true;
		RestoreDVDPanel();
	}
}

function BringDVDPanelToFront()
{
	if( answeredNo == false )
	{
		var c = DefineVarC();
		if(menuStyle == "MS")
		{
			c.theMainMenuLevel.fade = .7;
			c.theMainMenuLevel.SetAlpha(.1);
			c.Information_panel.SetTranslation(10,-25,90);
			//theMainMenuJoy.isBound = false;
		}
		else
		{
			c.ScreenSaver.fade = .7;
			c.ScreenSaver.SetAlpha(.1);
			c.Information_panel.SetTranslation(-10,-24,20);
			//thebsxcontrols.isBound = false;
		}
		theDVDPanelJoy.isBound = true;
	}
}

function RestoreDVDPanel()
{
	var c = DefineVarC();
	if (answeredNo)
    {
        	c.theSoundtrackSongInfoText.text = "";
        	c.theSoundtrackAlbumInfoText.text = "";
	}
        c.theSoundtrackSongInfoText.text = songtext;
        c.theSoundtrackAlbumInfoText.text = albumtext;
    

	c.theAbutton.visible = false;
	c.theBbutton.visible = false;
	if(menuStyle == "MS")
	{
        	c.theMainMenuLevel.fade = 0.25;
		c.theMainMenuLevel.SetAlpha(1);
		c.Information_panel.SetTranslation(-105,-110,5);
		if(ControlPanelOut)
		{
			if((SoundtrackActive) | (PlaylistActive)) { defplaylistjoy.isBound = true; }
			else { currentControlType.isBound = true; }
		}
		else { theMainMenuJoy.isBound = true; }
	}
	else
	{
        	c.ScreenSaver.fade = .5;
		c.ScreenSaver.SetAlpha(1);
		c.Information_panel.SetTranslation(-90,-100,-45);
		if(ControlPanelOut)
		{
			if((SoundtrackActive) | (PlaylistActive)) { defplaylistjoy.isBound = true; }
			else { currentControlType.isBound = true; }
		}
		else { thebsxcontrols.isBound = true; }
	}
	//theDVDPanelJoy.isBound = false;
}

function UpdateDVDIconStatus()
{
	RestoreDVDPanel();
	var c = DefineVarC();

        //c.theSoundtrackSongInfoText.text = songtext;
        //c.theSoundtrackAlbumInfoText.text = albumtext;

	c.theAbutton.visible = false;
	c.theBbutton.visible = false;

	if ( theDiscDrive.discType == "Video" )
	{
		c.DVDStatusIconTexture.url = "dvdvideo.xbx";
		c.theSoundtrackAlbumInfoText.text = "Play movie?";
		c.theSoundtrackSongInfoText.text = "   Yes        No";
		c.theAbutton.visible = true;
		c.theBbutton.visible = true;
		BringDVDPanelToFront();
	}
	else if ( theDiscDrive.discType == "Audio" )
	{
		c.DVDStatusIconTexture.url = "dvdaudio.xbx";
		c.theSoundtrackAlbumInfoText.text = "Play CD?";
		c.theSoundtrackSongInfoText.text = "   Yes        No";
		c.theAbutton.visible = true;
		c.theBbutton.visible = true;
		BringDVDPanelToFront();
	}
	else if ( theDiscDrive.discType == "Title" )
	{
		c.DVDStatusIconTexture.url = "dvdtitle.xbx";
		//c.theSoundtrackAlbumInfoText.text = "Play Game?";
		c.theSoundtrackAlbumInfoText.text = "Launch Title?";
		c.theSoundtrackSongInfoText.text = "   Yes        No";
		c.theAbutton.visible = true;
		c.theBbutton.visible = true;
		BringDVDPanelToFront();
	}
	else if ( theDiscDrive.discType == "unknown" ) 
    { 
		c.DVDStatusIconTexture.url = "dvdunknown.xbx";
		c.theSoundtrackAlbumInfoText.text = "Launch XMBC?";
		c.theSoundtrackSongInfoText.text = "   Yes        No";
		c.theAbutton.visible = true;
		c.theBbutton.visible = true;
		BringDVDPanelToFront();
    }
	else { c.DVDStatusIconTexture.url = "dvdempty.xbx"; }
	if(answeredNo == true) { RestoreDVDPanel(); }
}
function DefineVarC()
{
	var z;
	if(menuStyle == "MS") { z = theMainMenu.children[0].children[0]; }
	else { z = theBSXMenu.children[0].children[0]; }
	return z;
}

function StringtoInteger( thestring )
{
	var tempstring = thestring;
	var verysmallnumber = -10000;
	var theinteger = Math.max(tempstring, verysmallnumber);
	return theinteger;
}




DEF theLaunchGameLevel Level 
{
    function OnActivate()
    {
        theScreenSaver.enabled = true;
        if (theConfig.GetVideoMode() == 2)
            theXboxLogo16x9Background.isBound = true;
        else
            theXboxLogo4x3Background.isBound = true;
    }
    function OnArrival()
    {
		launch(itemLaunchXBE, itemLaunchPath);
    }
}
function GetOrb()
{
    var a = GetSavedValue("Dashboard Settings","Use Custom Orb");
    if(a == "True")
    {
        customorb = true;
    }
    else
    {
        customorb = false;
    }
}
function ChangeTheOrb(e)
{
var c = theMainMenu.children[0].children[0];
	c.Modded_Orb.visible = false;
	c.Stock_Orb.visible = false;
	c.Gasclown.visible = false;
	c.THC_Orb.visible = false;
	c.Main_pod_backing03.visible = false;

	c.gasorb.visible = false;
	c.gasorb.children[0].children[0].geometry.url = e;
	c.gasorb.visible = true;
}

function GetOrbName()
{
var OrbName = GetSavedValue("Dashboard Settings","Current Orb");
OrbName = "Q:\\orbs\\" + OrbName + "\\" + OrbName;

return OrbName;
}
function GoBackToMain()
{
	if(currentStyle == "MS") { theMainMenu.GoTo(); }
	else if(currentStyle == "BSX") { GoToBSX(); }
}
////////////////////////////////////////////////////////////////////////////
DEF theControlPanelControlsInline Inline
{
    visible true
    url "controlpanel.xap"
}

DEF theControlPanelLayer Layer
{
    visible false
    transparency 0.95
    fade 0.75

    viewpoint Viewpoint
    {
        fieldOfView 1.2
        position 10 6 150
    }

    children
    [
        DEF theControlPanel Transform
        {
            fade 0.25
            scale 1 1 1
            children
            [
                DEF theControlPanelInline Inline
                {
                    preload true
                    url "controlpanel/default.xap"
                    function onLoad() { MusicOnBootCheck(); }
                }
            ]
        }
    ]
}

function StartControlPanel()
{
    ControlPanelOut = true;
    theControlPanelControlsInline.children[0].InitializeControlPanel();
    EnableCurrentAlternateViewpoint();
}
////////////////////////////////////////////////////////////////////////////
