
var CurrentIcon;
var DropDown1On;
var DropDown2On;
var bInMusicPlayerMode;
///////////////////////
//var RightThumbDown;
//var LeftThumbDown;
///////////////////////
//var currentMusicPlayerMode;
///////////////////////

function InitializeControlPanel()
{
	////////////////////////////////
	defplaylistjoy = thePlaylistJoy;
	////////////////////////////////
	CurrentIcon = 2;
	theControlPanelLayer.visible = true;
	theInLine = theControlPanelInline.children[0];
	theInLine.theControlPanelDisplay.fade = 1;
	theInLine.theControlPanelDisplay.SetAlpha(0);
	ShowControlPanel();
	InitDropDown1();
	InitDropDown2();
	HideDropDown1();
	HideDropDown2();
	DropDown1On = false;
	DropDown2On = false;
	GetMode();
	UpdateModeText();
	GetPlaylists();
	////////////////////////////////
	//SetVolume();
	////////////////////////////////
}

function ShowControlPanel()
{
	ControlPanelOut = true;
	thePlayerPanelIn.Play();
	currentControlType = theMainControlPanelJoy;
	bInMusicPlayerMode = true;
	theMainControlPanelJoy.isBound = true;

	theInLine.theControlPanelDisplay.fade = 1;
	theInLine.theControlPanelDisplay.SetTranslation(-11,-37,1);
	theInLine.theControlPanelDisplay.SetRotation(-0.0001,0,0,0.54);
	theInLine.theControlPanelDisplay.SetAlpha(1);
	UpdateMainIconHilite();
	UpdateMusicPlayerDisplayText();
}

function HideControlPanel()
{
	thePlayerPanelOut.Play();
	ControlPanelOut = false;

	theMainControlPanelJoy.isBound = false;

	currentControlType = "";
	previousControlType.isBound = true;
	bInMusicPlayerMode = false;

	theInLine.theControlPanelDisplay.fade = 1.3;
	theInLine.theControlPanelDisplay.SetTranslation(0,-250,-60);
	theInLine.theControlPanelDisplay.SetRotation(1.0,0,0,3.17);
	theInLine.theControlPanelDisplay.SetAlpha(0);
	DisableCurrentAlternateViewpoint();

	if(DropDown1On == true) { HideDropDown1(); }
	if(DropDown2On == true) { HideDropDown2(); }
}

DEF theMainControlPanelJoy Joystick
{
	function OnADown()
    {
		if(CurrentIcon == 1)
		{
			if(currentMusicPlayerMode == "Continuous") { MusicPlayerRewind(); }
			else if(currentMusicPlayerMode == "Playlist"){ PlaylistREW(); }
			else if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
		}
		else if(CurrentIcon == 2)
		{
			if(( currentAlbum == 0) & (currentTrack == 0))
			{
				if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
				else { MusicPlayerPlay(); }
			}
			else { MusicPlayerPlay(); }
		}
		else if(CurrentIcon == 3) { MusicPlayerStop(); }
		else if(CurrentIcon == 4)
		{
			if(currentMusicPlayerMode == "Continuous") { MusicPlayerFastForward(); }
			else if(currentMusicPlayerMode == "Playlist") { PlaylistFFWD(); }
			else if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
		}
		else if(CurrentIcon == 5)
		{
			currentMusicPlayerMode = "Repeat";
			UpdateModeText();
		}
		else if(CurrentIcon == 6)
		{
			currentMusicPlayerMode = "Random";
			UpdateModeText();
			SaveMode();
		}
		else if(CurrentIcon == 7)
		{
			currentMusicPlayerMode = "Continuous";
			UpdateModeText();
			SaveMode();
		}
		//NEW
		//UpdateDVDIconStatus();
	}

	function OnSkipBack()
	{
		if(currentMusicPlayerMode == "Continuous") { MusicPlayerRewind(); }
		else if(currentMusicPlayerMode == "Playlist") { PlaylistREW(); }
		else if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
	}

	function OnSkipForward()
	{
		if(currentMusicPlayerMode == "Continuous") { MusicPlayerFastForward(); }
		else if(currentMusicPlayerMode == "Playlist") { PlaylistFFW(); }
		else if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
	}

	function OnStop() { MusicPlayerStop(); }
	function OnPlay() { MusicPlayerPlay(); }

	function OnGuide()
	{
		if(beInSoundtracks)
		{
		    	HideSoundtrackMenu();
		    	beInSoundtracks = false;
		}
		else
		{
		    	ShowSoundtrackMenu();
		   	beInSoundtracks = true;
		}
	}

	function OnInfo()
	{
		if(beInPlaylists)
		{
		    	HidePlaylistMenu();
		    	beInPlaylists = false;
		}
		else
		{
		    	ShowPlaylistMenu();
		    	beInPlaylists = true;
		}
	}

	function OnBDown() { HideControlPanel(); }

	function OnXDown()
	{
		if(beInSoundtracks)
		{
			HideSoundtrackMenu();
			beInSoundtracks = false;
		}
		else
		{
			ShowSoundtrackMenu();
		   	beInSoundtracks = true;
		}
	}

	function OnYDown()
	{
		if(beInPlaylists)
		{
			HidePlaylistMenu();
		    	beInPlaylists = false;
		}
		else
		{
			ShowPlaylistMenu();
		    	beInPlaylists = true;
		}
	}

	function OnLeftDown() { LeftTrigger = true; }
	function OnLeftUp()   { LeftTrigger = false; }

	function OnRightDown()
	{
		RightTrigger = true;
		UpdateVolumeOnScreen();
	}

	function OnRightUp()
	{
		RightTrigger = false;
		UpdateModeText();
		SaveVolume();
	}

	function OnLeftThumbMoveUp()
      	{
	    	if(RightTrigger) { MusicPlayerVolumeUp(); }
      	}

      	function OnLeftThumbMoveDown()
      	{
	    	if(RightTrigger) { MusicPlayerVolumeDown(); }
      	}
	
	function OnLeftThumbMoveLeft()
	{
		if(RightTrigger == true)
		{
			CPWidth = CPWidth - 0.01;
			UpdateCPSize();
		}
		else
		{
			if(CurrentIcon == 1) { return; }
			else
			{
				PlaySoundMenuChange();
				CurrentIcon = CurrentIcon - 1;
			}
			UpdateMainIconHilite();
		}
	}
	
	function OnLeftThumbMoveRight()
	{
		if(RightTrigger == true)
		{
			CPWidth = CPWidth + 0.01;
			UpdateCPSize();
		}
		else
		{
			if(CurrentIcon == 7) { return; }
			else
			{
				PlaySoundMenuChange();
				CurrentIcon = CurrentIcon + 1;
			}
			UpdateMainIconHilite();
		}
	}

	//function OnRightThumbDown() { RightThumbDown = true; }
	//function OnLeftThumbDown()  { LeftThumbDown = true; }
	//function OnRightThumbUp()   { RightThumbDown = false; }
	//function OnLeftThumbUp()    { LeftThumbDown = false; }
}

function HideIconsHilite()
{
	theInLine.controlpanel_icon_01_hilite.fade = 0.3;
	theInLine.controlpanel_icon_02_hilite.fade = 0.3;
	theInLine.controlpanel_icon_03_hilite.fade = 0.3;
	theInLine.controlpanel_icon_04_hilite.fade = 0.3;
	theInLine.controlpanel_icon_05_hilite.fade = 0.3;
	theInLine.controlpanel_icon_06_hilite.fade = 0.3;
	theInLine.controlpanel_icon_07_hilite.fade = 0.3;

	theInLine.controlpanel_icon_01_hilite.SetAlpha(0);
	theInLine.controlpanel_icon_02_hilite.SetAlpha(0);
	theInLine.controlpanel_icon_03_hilite.SetAlpha(0);
	theInLine.controlpanel_icon_04_hilite.SetAlpha(0);
	theInLine.controlpanel_icon_05_hilite.SetAlpha(0);
	theInLine.controlpanel_icon_06_hilite.SetAlpha(0);
	theInLine.controlpanel_icon_07_hilite.SetAlpha(0);
}

function UpdateMainIconHilite()
{
		theInLine.controlpanel_inscreen.fade = 0.3;
		theInLine.theLeftSideText.fade = 0.3;
	HideIconsHilite();
	if(CurrentIcon == 1) { theInLine.controlpanel_icon_01_hilite.SetAlpha(1); }
	else if(CurrentIcon == 2) { theInLine.controlpanel_icon_02_hilite.SetAlpha(1); }
	else if(CurrentIcon == 3) { theInLine.controlpanel_icon_03_hilite.SetAlpha(1); }
	else if(CurrentIcon == 4) { theInLine.controlpanel_icon_04_hilite.SetAlpha(1); }
	else if(CurrentIcon == 5) { theInLine.controlpanel_icon_05_hilite.SetAlpha(1); }
	else if(CurrentIcon == 6) { theInLine.controlpanel_icon_06_hilite.SetAlpha(1); }
	else if(CurrentIcon == 7) { theInLine.controlpanel_icon_07_hilite.SetAlpha(1); }
}

function ShowMainCPDisplay()
{
	theInLine.controlpanel_inscreen.SetAlpha(1);
	UpdateMainIconHilite();
}

function HideMainCPDisplay()
{
	theInLine.theLeftSideText_Heading.text = "";
	theInLine.controlpanel_inscreen.SetAlpha(0);
}

var beInCDPlayer;
var currentCDTrack;
var bInPause;

var beInPlaylists;
var PlaylistActive;
var PlaylistNumber;
var PlaylistTitleMenu;
var PlaylistSongMenu;

var beInSoundtracks;
var SoundtrackActive;
var SoundtrackTitleMenu;
var SoundtrackSongMenu;

var acurMenuItem;
var bcurMenuItem;
var ccurMenuItem;
var dcurMenuItem;
var ecurMenuItem;
var fcurMenuItem;
var gcurMenuItem;

var StCount;
var TrCount;
var StName;
var StNum;
var TrNum;

var bIsNewSong;
//var BGMCount;
var curMusicPlayerButton;
/*
DEF theMusicPlayer AudioClip
{
    url "cd:"
    sendProgress true

    function OnProgressChanged()
    {
        if (bInMusicMenu) { theMusicInline.children[0].SetMusicPlayPos(progress); }
	UpdateTrackTime();
    }

    function OnTransportModeChanged()
    {
        if (bInMusicMenu) { theMusicInline.children[0].UpdateTransportIndicators(); }
    }

    function OnTrackChanged()
    {
        if (bInMusicMenu) { theMusicInline.children[0].UpdateTrackList(); }
	UpdateMusicPlayerDisplayText();
    }

    function OnEndOfAudio()
    {
	  if(currentMusicPlayerMode == "Playlist") { PlaylistFFWD(); }
	  else if(currentMusicPlayerMode == "Continuous") { SoundtrackFFW(); }
	  else if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
	  else if(currentMusicPlayerMode == "Repeat") { MusicPlayerRepeat(); }
    }
}

DEF audioVisualizer DynamicTexture
{
    palette Palette { type 7 changePeriod 3 }

    size 352
    erase false
    fps 60

    children
    [

        ImageFader { changePeriod 10 }
        StarField
	//DotField

        AudioVisualizer
        {
            source USE theMusicPlayer
            type "circle"
            scale 1.5
        }

        AudioVisualizer
        {
            source USE theMusicPlayer
            type "analyzer"
            //type "bubble"
	    //type "ambience"
        }
    ]
}
*/
function GetMode()
{
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	currentMusicPlayerMode = info.GetValue("Music Play Mode");
}

function SetVolume()
{
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	var b = info.GetValue("Music Player Volume");
	var c = ReturnInteger(b);
	theMusicPlayer.volume = c;
}

function SaveVolume()
{
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	info.SetValue("Music Player Volume", theMusicPlayer.volume);
}

function ChangeMode()
{
	if(currentMusicPlayerMode == "Continuous")
	{
		currentMusicPlayerMode = "Playlist";
		PlayPlaylistSong(0);
	}
	else if(currentMusicPlayerMode == "Playlist")
	{
		currentMusicPlayerMode = "Random";
		MusicPlayerRandom();
	}
	else if(currentMusicPlayerMode == "Random") { currentMusicPlayerMode = "Continuous"; }
	SaveMode();
	UpdateModeText();
}

function SaveMode()
{
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	info.SetValue("Music Play Mode", currentMusicPlayerMode);
}

function UpdateModeText() { theInLine.theModeNameText.text = currentMusicPlayerMode; }

function UpdateTrackTime()
{
    var m = theMusicPlayer.getMinutes();
    if (m < 10) { m = "0" + m; }
    var s = theMusicPlayer.getSeconds();
    if (s < 10) { s = "0" + s; }
    var strTime = theMusicCollection.FormatSoundtrackSongTime(currentAlbum, currentTrack);

    //theInLine.theTrackTimeText.text = m + ":" + s;
    theInLine.theTrackTimeText.text = m + ":" + s + "/" + strTime;
    if(bInMusicMenu) { theMusicPlayMenu.children[0].children[0].MusicTimeText.text = m + ":" + s; }
}

function InitializeMusicPlayerValues()
{
	bInPause = false;
	beInCDPlayer = false;
	beInSoundtracks = false;
	beInPlaylists = false;
	PlaylistActive = false;
	SoundtrackActive = false;
	SoundtrackTitleMenu = false;
	SoundtrackSongMenu = false;

	PlaylistNumber = 0;
	GetPlaylists();
	acurMenuItem = 0;
}

function MusicPlayerStart()
{
	InitializeMusicPlayerValues();
/*
	var info = new Settings;
	info.file = "Y:\\config.xbx";
	var a = info.GetValue("Background Music");
	if(a == "Yes") { BGMon = true; }

	var IniFile = new Settings; 
	IniFile.SetIniSection( "Music On Boot" );
	var a = IniFile.GetIniValue( "enabled" );
	IniFile.CloseIniFile();
	if(a == "true") { BGMon = true; }
*/
	SetVolume();
	GetMode();
	DisableAmbientAudio();
	     if(currentMusicPlayerMode == "Random") { MusicPlayerRandom(); }
	else if(currentMusicPlayerMode == "Playlist")
	{
		GetPlaylists();
		if(PlaylistTotal == 0) { MusicPlayerRandom(); }
		else
		{
			GetPlaylistSongs(0);
			PlayPlaylistSong(0);
		}
	}
	else if(currentMusicPlayerMode == "Continuous") { PlaySong(0,0); }
	else { MusicPlayerRandom(); }
}

function InitDropDown2()
{
	theInLine.DropDownMenu2.visible = true;
	DropDown2On = true;
	ShowDropDown2();
}

function InitDropDown1()
{
	theInLine.DropDownMenu1.visible = true;
	DropDown1On = true;
	ShowDropDown1();
}

function ShowDropDown2()
{
	theInLine.DropDownMenu2.fade = 0.85;
	theInLine.DropDownMenu2.SetTranslation(-120.988, 125, -20.78);
	theInLine.DropDownMenu2.SetRotation(0, 0, 4.715, -4.715);
	thePlayerPanelIn.Play();
}

function ShowDropDown1()
{
	theInLine.DropDownMenu1.fade = 0.85;
	theInLine.DropDownMenu1.SetTranslation(140.988, 125, -10.78);
	theInLine.DropDownMenu1.SetRotation(0.2, 0.2, 0, -3.142);
	thePlayerPanelIn.Play();
}

function HideDropDown2()
{
	theInLine.DropDownMenu2.fade = 0.85;
	theInLine.DropDownMenu2.SetTranslation(-540, 250, -21);
	theInLine.DropDownMenu2.SetRotation(3.7, -1.2, 1.715, -3.715);
	DropDown2On = false;
	thePlayerPanelOut.Play();
}

function HideDropDown1()
{
	theInLine.DropDownMenu1.fade = 0.85;
	theInLine.DropDownMenu1.SetTranslation(360, 250.056, -10.78);
	theInLine.DropDownMenu1.SetRotation(0.2, 0.2, 0.9, -3.142);
	DropDown1On = false;
	thePlayerPanelOut.Play();
}

function UpdateVolumeOnScreen()
{
	var a = Math.round(theMusicPlayer.volume * 100);
	theInLine.theModeNameText.text = "vol: " + a;
}

function UpdateMusicPlayerDisplayText()
{
	if(bPlayingCd)
	{
		theInLine.theSoundtrackNameText.text = "CD ROM";
		theInLine.theSongNameText.text = "Track " + currentTrack;
	}
	else
	{
		theInLine.theSoundtrackNameText.text = albumtext;
		theInLine.theSongNameText.text = songtext;
	}
}

//////////////////////////////////////////////////////////////////////////////////////
/*
function UpdateInfoPanel()
{
	if(bPlayingCd)
	{
		var c = DefineVarC();
		c.theSoundtrackSongInfoText.text = "CD ROM";
		c.theSoundtrackAlbumInfoText.text = "Track " + currentTrack;
	}
	else { UpdateDVDIconStatus(); }
}
*/
//////////////////////////////////////////////////////////////////////////////////////

///////////////////////////// Playlist Menu //////////////////////////////////////////

function ShowPlaylistMenu()
{
	InitDropDown1();
	ShowPlaylistTitleMenu();

	beInPlaylists = true;
	if(thePlaylistJoy.isBound == false) { thePlaylistJoy.isBound = true; }
}

function HidePlaylistMenu()
{
	HideDropDown1();
	PlaylistActive = false;
	beInPlaylists = false;
	if(beInSoundtracks) { SoundtrackActive = true; }
	else
	{
		thePlaylistJoy.isBound = false;
		currentControlType.isbound = true;
	}
}

function ShowPlaylistTitleMenu()
{
	bcurMenuItem = 0;
	ccurMenuItem = 0;
	dcurMenuItem = 0;
	GetPlaylists();
	PlaylistActive = true;
	SoundtrackActive = false;
	PlaylistTitleMenu = true;
	PlaylistSongMenu = false;
	UpdatePlaylistTitleMenu();
}

function ShowPlaylistSongMenu(x)
{
	var a = x;
	bcurMenuItem = 0;
	ccurMenuItem = 0;
	dcurMenuItem = 0;
	GetPlaylistSongs(a);
	PlaylistTitleMenu = false;
	PlaylistSongMenu = true;
	UpdatePlaylistSongMenu();
}

function UpdatePlaylistTitleMenu()
{
	var c = theControlPanelInline.children[0];
	for(var i = 0; i < 9; i = i + 1)
	{
		var nplist = bcurMenuItem + i - 1;
		if (nplist >= PlaylistTotal) { c.theDropDown1Text.children[i].children[0].geometry.text = ""; }
		else
		{
			var str;
			if(nplist < 0) { str = "Add Playlist"; }
			else { str = PlaylistNames[nplist]; }

			c.theDropDown1Text.children[i].children[0].geometry.text = str;
        		if (i == dcurMenuItem) { c.theDropDown1Text.children[i].children[0].appearance.material.name = "CellEgg/Partsz"; }
			                  else { c.theDropDown1Text.children[i].children[0].appearance.material.name = "NavType"; }
		}
	}
}

function UpdatePlaylistSongMenu()
{
	var c = theControlPanelInline.children[0];
	for(var i = 0; i < 9; i = i + 1)
	{
		var nplist = bcurMenuItem + i;
		if (nplist >= SongTotal) { c.theDropDown1Text.children[i].children[0].geometry.text = ""; }
		else
		{
			var str = SongTitles[nplist];
			c.theDropDown1Text.children[i].children[0].geometry.text = str;
        		if (i == dcurMenuItem) { c.theDropDown1Text.children[i].children[0].appearance.material.name = "CellEgg/Partsz"; }
			                  else { c.theDropDown1Text.children[i].children[0].appearance.material.name = "NavType"; }
		}
	}
}

///////////////////////////// Soundtrack Menu //////////////////////////////////////////

function ShowSoundtrackMenu()
{
	beInSoundtracks = true;
	InitDropDown2();
	ShowSoundtrackTitleMenu();

	beInSoundtracks = true;
	if(thePlaylistJoy.isBound == false) { thePlaylistJoy.isBound = true; }
}

function HideSoundtrackMenu()
{
	HideDropDown2();
	SoundtrackActive = false;
	beInSoundtracks = false;

	if(beInPlaylists) { PlaylistActive = true; }
	else
	{
		thePlaylistJoy.isBound = false;
		currentControlType.isBound = true;
	}
}

function ShowSoundtrackTitleMenu()
{
    StNum = 0;
    TrNum = 0;
    ecurMenuItem = 0;
    fcurMenuItem = 0;
    gcurMenuItem = 0;
    PlaylistActive = false;
    SoundtrackActive = true;
    SoundtrackTitleMenu = true;
    SoundtrackSongMenu = false;
    StCount = theMusicCollection.GetSoundtrackCount();
    UpdateSoundtrackTitleMenu();
}

function ShowSoundtrackSongMenu()
{
    ecurMenuItem = 0;
    fcurMenuItem = 0;
    gcurMenuItem = 0;
    SoundtrackTitleMenu = false;
    SoundtrackSongMenu = true;
    TrCount = theMusicCollection.GetSoundtrackSongCount(StNum);
    StName = theMusicCollection.GetSoundtrackName(StNum);
    UpdateSoundtrackSongMenu();
}

function UpdateSoundtrackTitleMenu()
{
	var c = theControlPanelInline.children[0];
	StNum = fcurMenuItem;
	for(var i = 0; i < 9; i = i + 1)
	{
		var nslist = ecurMenuItem + i;
		if (nslist >= StCount) { c.theDropDown2Text.children[i].children[0].geometry.text = ""; }
		else
		{
			var str = theMusicCollection.GetSoundtrackName(nslist);
			c.theDropDown2Text.children[i].children[0].geometry.text = str;
        		if (i == gcurMenuItem) { c.theDropDown2Text.children[i].children[0].appearance.material.name = "CellEgg/Partsz"; }
			                  else { c.theDropDown2Text.children[i].children[0].appearance.material.name = "NavType"; }
		}
	}
}

function UpdateSoundtrackSongMenu()
{
	var c = theControlPanelInline.children[0];
	TrNum = fcurMenuItem;
	for(var i = 0; i < 9; i = i + 1)
	{
		var nslist = ecurMenuItem + i;
		if (nslist >= TrCount) { c.theDropDown2Text.children[i].children[0].geometry.text = ""; }
		else
		{
			var str = theMusicCollection.GetSoundtrackSongName(StNum, nslist);
			c.theDropDown2Text.children[i].children[0].geometry.text = str;
        		if (i == gcurMenuItem) { c.theDropDown2Text.children[i].children[0].appearance.material.name = "CellEgg/Partsz"; }
			                  else { c.theDropDown2Text.children[i].children[0].appearance.material.name = "NavType"; }
		}
	}
}

DEF thePlaylistJoy Joystick
{
	function OnADown()
	{
		if(PlaylistActive)
		{
			if(PlaylistTitleMenu)
			{
				if(ccurMenuItem == 0)
				{
					var b = "";
					theControlPanelInline.children[0].theControlPanelDisplay.visible = false;
					theControlPanelInline.children[0].theDropDownPanels.visible = false;
					ShowKeyboard("Enter Playlist Name", b, "theControlPanelControlsInline.children[0].AddPlaylist(strKeyboardEdit)", "theControlPanelControlsInline.children[0].ExitRename()");
				}
				else
				{
					PlaylistNumber = ccurMenuItem - 1;
					ShowPlaylistSongMenu(PlaylistNumber);
				}
			}
			else if(PlaylistSongMenu) { PlayPlaylistSong(ccurMenuItem); }
		}
		else if(SoundtrackActive)
		{
			if(SoundtrackTitleMenu) { ShowSoundtrackSongMenu(); }
			else if(SoundtrackSongMenu){ PlaySoundtrackSong(); }
		}
	}
	function OnBDown()
	{
		if(PlaylistActive)
		{
			if(PlaylistTitleMenu) { return; }
			else if(PlaylistSongMenu)
			{
				PlaylistSongMenu = false;
				PlaylistTitleMenu = true;
				bcurMenuItem = 0;
				ccurMenuItem = 0;
				dcurMenuItem = 0;
				UpdatePlaylistTitleMenu();
			}
		}
		else if(SoundtrackActive)
		{
			if(SoundtrackTitleMenu) { return; }
			else if(SoundtrackSongMenu)
			{
				SoundtrackSongMenu = false;
				SoundtrackTitleMenu = true;
				ecurMenuItem = 0;
				fcurMenuItem = 0;
				gcurMenuItem = 0;
				UpdateSoundtrackTitleMenu();
			}
		}
	}
	function OnWhiteDown()
	{
		if((PlaylistSongMenu) & (SoundtrackSongMenu) & (SoundtrackActive))
		{
			AddSong(fcurMenuItem);
			GetPlaylistSongs(PlaylistNumber);
			UpdatePlaylistSongMenu();
		}
	}
	function OnBlackDown()
	{
		if((PlaylistActive) & (PlaylistTitleMenu))
		{
			PlaylistNumber = ccurMenuItem - 1;
			if(ccurMenuItem > 0)
			{
				if(PlaylistTotal == 1)
				{
					ClearPlaylists();
					ClearPlaylistSongs(0);
					bcurMenuItem = 0;
					ccurMenuItem = 0;
					dcurMenuItem = 0;
				}
				else
				{
					ClearPlaylistSongs(PlaylistNumber);
					DeletePlaylist(PlaylistNumber);
					if(PlaylistNumber == PlaylistTotal)
					{
	    					ccurMenuItem = ccurMenuItem - 1;

	    					if (dcurMenuItem == 0) { bcurMenuItem = bcurMenuItem - 1; }
						else { dcurMenuItem = dcurMenuItem - 1; }
					}
				}
				GetPlaylists();
				UpdatePlaylistTitleMenu();
			}
		}
		else if((PlaylistActive) & (PlaylistSongMenu))
		{
			if(SongTotal == 1)
			{
				ClearPlaylistSongs(PlaylistNumber);
			}
			else
			{
				DeleteSong(ccurMenuItem);
				if(ccurMenuItem == SongTotal)
				{
	    				ccurMenuItem = ccurMenuItem - 1;

	    				if (dcurMenuItem == 0) { bcurMenuItem = bcurMenuItem - 1; }
					else { dcurMenuItem = dcurMenuItem - 1; }
				}
			}
			GetPlaylistSongs(PlaylistNumber);
			UpdatePlaylistSongMenu();
		}
	}
	function OnYDown()
	{
		if(beInPlaylists)
		{
		    HidePlaylistMenu();
		    beInPlaylists = false;
		}
		else
		{
		    ShowPlaylistMenu();
		    beInPlaylists = true;
		}
		/////////////
        	UpdateText();
		/////////////
	}

	function OnInfo()
	{
		if(beInPlaylists)
		{
		    HidePlaylistMenu();
		    beInPlaylists = false;
		}
		else
		{
		    ShowPlaylistMenu();
		    beInPlaylists = true;
		}
		/////////////
        	UpdateText();
		/////////////
	}

	function OnGuide()
	{
		if(beInSoundtracks)
		{
		    HideSoundtrackMenu();
		    beInSoundtracks = false;
		}
		else
		{
		    ShowSoundtrackMenu();
		    beInSoundtracks = true;
		}
		/////////////
        	UpdateText();
		/////////////
	}

	function OnXDown()
	{
		if(beInSoundtracks)
		{
		    HideSoundtrackMenu();
		    beInSoundtracks = false;
		}
		else
		{
		    ShowSoundtrackMenu();
		    beInSoundtracks = true;
		}
		/////////////
        	UpdateText();
		/////////////
	}
	function OnLeftThumbMoveRight()
	{
		if((beInSoundtracks) & (beInPlaylists))
		{
			PlaylistActive = true;
			SoundtrackActive = false;
			/////////////
        		UpdateText();
			/////////////
		}
	}
	function OnLeftThumbMoveLeft()
	{
		if((beInSoundtracks) & (beInPlaylists))
		{
			SoundtrackActive = true;
			PlaylistActive = false;
			/////////////
        		UpdateText();
			/////////////
		}
	}
	function OnLeftThumbMoveUp()
	{
		if(PlaylistActive)
		{
			if(PlaylistTitleMenu)
			{
				if (ccurMenuItem <= 0) { return; }

	    			PlaySoundMenuChange();

	    			ccurMenuItem = ccurMenuItem - 1;

	    			if (dcurMenuItem == 0) { bcurMenuItem = bcurMenuItem - 1; }
				else { dcurMenuItem = dcurMenuItem - 1; }

				UpdatePlaylistTitleMenu();
			}
			else if(PlaylistSongMenu)
			{
				if (ccurMenuItem == 0) { return; }

				PlaySoundMenuChange();

				ccurMenuItem = ccurMenuItem - 1;

				if (dcurMenuItem == 0) { bcurMenuItem = bcurMenuItem - 1; }
				else { dcurMenuItem = dcurMenuItem - 1; }

				UpdatePlaylistSongMenu();
			}
		}
		else if(SoundtrackActive)
		{
	    		if (fcurMenuItem == 0) { return; }

	    		PlaySoundMenuChange();

	    		fcurMenuItem = fcurMenuItem - 1;

	    		if (gcurMenuItem == 0) { ecurMenuItem = ecurMenuItem - 1; }
	    		else { gcurMenuItem = gcurMenuItem - 1; }

			if(SoundtrackTitleMenu) { UpdateSoundtrackTitleMenu(); }
			else if(SoundtrackSongMenu) { UpdateSoundtrackSongMenu(); }
		}
	}
	function OnLeftThumbMoveDown()
	{
		if(PlaylistActive)
		{
			if(PlaylistTitleMenu)
			{
				if (ccurMenuItem >= PlaylistTotal) { return; }

	    			PlaySoundMenuChange();

	    			ccurMenuItem = ccurMenuItem + 1;

				if (dcurMenuItem == 8) { bcurMenuItem = bcurMenuItem + 1; }
				else { dcurMenuItem = dcurMenuItem + 1; }

				UpdatePlaylistTitleMenu();
			}
			else if(PlaylistSongMenu)
			{
				if (ccurMenuItem == SongTotal - 1) { return; }

	    			PlaySoundMenuChange();

	    			ccurMenuItem = ccurMenuItem + 1;

				if (dcurMenuItem == 8) { bcurMenuItem = bcurMenuItem + 1; }
				else { dcurMenuItem = dcurMenuItem + 1; }

				UpdatePlaylistSongMenu();
			}
		}
		else if(SoundtrackActive)
		{
			if(SoundtrackTitleMenu)
			{
				if (fcurMenuItem == StCount - 1) { return; }

	    			PlaySoundMenuChange();

	    			fcurMenuItem = fcurMenuItem + 1;

				if (gcurMenuItem == 8) { ecurMenuItem = ecurMenuItem + 1; }
				else { gcurMenuItem = gcurMenuItem + 1; }

				UpdateSoundtrackTitleMenu();
			}
			else if(SoundtrackSongMenu)
			{
				if (fcurMenuItem == TrCount - 1) { return; }

	    			PlaySoundMenuChange();

	    			fcurMenuItem = fcurMenuItem + 1;

				if (gcurMenuItem == 8) { ecurMenuItem = ecurMenuItem + 1; }
				else { gcurMenuItem = gcurMenuItem + 1; }

				UpdateSoundtrackSongMenu();
			}
		}
	}
}

///////////////////////////// Soundtrack Functions /////////////////////////////////////

function PlaySoundtrackSong()
{
	currentMusicPlayerMode = "Continuous";
	currentAlbum = StNum;
	currentTrack = TrNum;
	MusicPlayerPlay();
	UpdateModeText();
	SaveMode();
}

function SoundtrackFFW()
{
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum);
	if(currentTrack < (totalTracks - 1)) { currentTrack = currentTrack + 1; }
	else { currentTrack = 0; }

	MusicPlayerPlay();
}

function SoundtrackREW()
{
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum);
	if(currentTrack == 0) { currentTrack = totalTracks; }
	else { currentTrack = currentTrack - 1; }

	MusicPlayerPlay();
}

function SoundtrackRandom() { MusicPlayerRandom(); }

/////////////////////// Playlist Functions //////////////////////////////////////////////////////////////

var vPLPos;
var PlaylistTotal;
var PlaylistNames;
var PlaylistNumber;
var SoundtrackTitles;
var SongTitles;
var SongTotal;

function GetPlaylists()
{
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	var d = info.GetValue("Number of Playlists");
	PlaylistTotal = ReturnInteger(d);
	if(PlaylistTotal == 0)
	{
		PlaylistNames = "";
	}
	else
	{
		PlaylistNames = new Array(PlaylistTotal);
		for(var i = 0; i < PlaylistTotal; i = i + 1)
		{
	    		var a = "Title of Playlist" + i;
	    		PlaylistNames[i] = info.GetValue(a);
		}
	}
	return PlaylistNames;
	return PlaylistTotal;
}

function ExitRename()
{
	theControlPanelLayer.fade = 0.25;
	//theControlPanelLayer.visible = true;
	theControlPanelInline.children[0].theControlPanelDisplay.visible = true;
}

function AddPlaylist(x)
{
	theControlPanelLayer.fade = 0.25;
	//theControlPanelLayer.visible = true;
	theControlPanelInline.children[0].theControlPanelDisplay.visible = true;

	var a = x;
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	var b = "Title of Playlist" + PlaylistTotal;
	var e = PlaylistTotal + 1;
	info.SetValue("Number of Playlists", e);
	info.SetValue(b, a);
	GetPlaylists();
	UpdatePlaylistTitleMenu();
}

function DeletePlaylist(x)
{
	var a = x;
	var d = new Array;
	var b = new Array;
	for(var i = 0; i < PlaylistTotal; i = i + 1)
	{
		if(i < a)
		{
			d[i] = PlaylistNames[i];
		}
		else if(i > a)
		{
			d[i - 1] = PlaylistNames[i];
		}
	}
	PlaylistTotal = PlaylistTotal - 1;
	PlaylistNames = d;
	for(var k = 0; k < PlaylistTotal; k = k + 1)
	{
		RebuildPlaylist(k,PlaylistNames[k]);
	}
}

function RebuildPlaylist(x,y)
{
	var a = x;
	var b = y;
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	info.SetValue("Number of Playlists", PlaylistTotal);
	info.SetValue("Title of Playlist" + a, b);
	info.SetValue("Title of Playlist" + PlaylistTotal, "");
}

function ClearPlaylists()
{
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\PlaylistInfo.xbx";
	info.SetValue("Number of Playlists", 0);
	info.SetValue("Title of Playlist0", "");
}

function GetPlaylistSongs(x)
{
	var a = x;
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\" + PlaylistNames[a] + ".xbx";
	info.section = "Albums";
	var nfo = new Settings;
	nfo.file = "Q:\\system\\Playlists\\" + PlaylistNames[a] + ".xbx";
	nfo.section = "Songs";
	var b = info.GetValue("Total Songs");
	SongTotal = ReturnInteger(b);
	if(SongTotal == 0)
	{
		SongTitles = "";
		SoundtrackTitles = "";
	}
	else
	{
		SongTitles = new Array(SongTotal);
		SoundtrackTitles = new Array(SongTotal);
		for(var i = 0; i < SongTotal; i = i + 1)
		{
			var c = "Album" + i;
			var d = "Song" + i;
			SoundtrackTitles[i] = info.GetValue(c);
			SongTitles[i] = nfo.GetValue(d);
		}
	}
}

function AddSong(x)
{
	var a = x;
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\" + PlaylistNames[PlaylistNumber] + ".xbx";
	info.section = "Albums";
	var b = "Album" + SongTotal;
	var d = theMusicCollection.GetSoundtrackName(StNum);
	info.SetValue(b, d);
	var i = SongTotal + 1;
	info.SetValue("Total Songs", i);

	var nfo = new Settings;
	nfo.file = "Q:\\system\\Playlists\\" + PlaylistNames[PlaylistNumber] + ".xbx";
	nfo.section = "Songs";
	var h = "Song" + SongTotal;
	var g = theMusicCollection.GetSoundtrackSongName(StNum, TrNum);
	nfo.SetValue(h, g);
}

function DeleteSong(x)
{
	var a = x;
	var b = new Array;
	var c = new Array;
	var d = SoundtrackTitles.length;
	var e = SongTitles.length;
	for(var i = 0; i < d; i = i + 1)
	{
		if(i < a)
		{
			b[i] = SoundtrackTitles[i];
		}
		else if(i > a)
		{
			b[i - 1] = SoundtrackTitles[i];
		}
	}
	for(var j = 0; j < e; j = j + 1)
	{
		if(j < a)
		{
			c[j] = SongTitles[j];
		}
		else if(j > a)
		{
			c[j - 1] = SongTitles[j];
		}
	}
	SongTotal = SongTotal - 1;
	SoundtrackTitles = b;
	SongTitles = c;
	for(var k = 0; k < SongTotal; k = k + 1)
	{
		RebuildPlaylistSongs(k,SoundtrackTitles[k],SongTitles[k]);
	}
}

function RebuildPlaylistSongs(x,y,z)
{
	var a = x;
	var b = y;
	var c = z;
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\" + PlaylistNames[PlaylistNumber] + ".xbx";
	info.section = "Albums";
	var nfo = new Settings;
	nfo.file = "Q:\\system\\Playlists\\" + PlaylistNames[PlaylistNumber] + ".xbx";
	nfo.section = "Songs";
	if(SongTotal == 0)
	{
		info.SetValue("Album0", "");
		info.SetValue("Total Songs", 0);
		nfo.SetValue("Song0", "");
	}
	else
	{
		info.SetValue("Album" + a, b);
		info.SetValue("Total Songs", SongTotal);
		info.SetValue("Album" + SongTotal, "");
		nfo.SetValue("Song" + a, c);
		nfo.SetValue("Song" + SongTotal, "");
	}
}

function ClearPlaylistSongs(x)
{
	var a = x;
	GetPlaylistSongs(a);
	var info = new Settings;
	info.file = "Q:\\system\\Playlists\\" + PlaylistNames[a] + ".xbx";
	info.section = "Albums";
	if(SongTotal > 0)
	{
		for(var i = 0; i < SongTotal; i = i + 1)
		{
			info.section = "Albums";
			info.SetValue("Album" + i, "");
			info.SetValue("Total Songs", 0);
		}
		for(var j = 0; j < SongTotal; j = j + 1)
		{
			info.section = "Songs";
			info.SetValue("Song" + j, "");
		}
	}
}

function PlayPlaylistSong(x)
{	
	currentMusicPlayerMode = "Playlist";
	var a = x;
	var totalAlbums = theMusicCollection.GetSoundtrackCount();
	for(var i = 0; i < totalAlbums; i = i + 1)
	{
		if(theMusicCollection.GetSoundtrackName(i) == SoundtrackTitles[a])
		{
			currentAlbum = i;
		}
	}
	var totalTracks = theMusicCollection.GetSoundtrackSongCount(currentAlbum);
	for(var k = 0; k < totalTracks; k = k + 1)
	{
		if(theMusicCollection.GetSoundtrackSongName(currentAlbum, k) == SongTitles[a])
		{
			currentTrack = k;
		}
	}
	vPLPos = a;
	MusicPlayerPlay();
	UpdateModeText();
	SaveMode();
}

function PlaylistFFWD()
{
    if(vPLPos == SongTotal - 1) { vPLPos = 0; }
    else { vPLPos = vPLPos + 1; }

    PlayPlaylistSong(vPLPos);
}

function PlaylistREW()
{
    if(vPLPos == 0) { vPLPos = SongTotal - 1; }
    else { vPLPos = vPLPos - 1; }

    PlayPlaylistSong(vPLPos);
}

///////////////////////////// CD Player Functions /////////////////////////////////////

function CDPlayerPlay(x)
{
	var a = x;
	beInCDPlayer = true;//temp
	DisableAmbientAudio();
	currentTrack = a + 1;
	theMusicPlayer.url = "cd:" + currentTrack;
	theMusicPlayer.Play();
	albumtext = "CD-ROM";
	songtext = currentTrack;

	if(bInMusicPlayerMode) { UpdateMusicPlayerDisplayText(); }
}

function CDPlayerStop()
{
	beInCDPlayer = false;//temp
	MusicPlayerStop();
}

function CDPlayerFFW()
{
	var totalTracks = (theDiscDrive.getTrackCount() - 1);
	if(currentCDTrack == totalTracks) { currentCDTrack = 0; }
	else { currentCDTrack = currentCDTrack + 1; }

	CDPlayerPlay();
}

function CDPlayerREW()
{
	var totalTracks = (theDiscDrive.getTrackCount() - 1);
	if(currentCDTrack == 0) { currentCDTrack = totalTracks; }
	else { currentCDTrack = currentCDTrack - 1; }

	CDPlayerPlay();
}

function CDPlayerRandom()
{
	DisableAmbientAudio();
	var totalTracks = (theDiscDrive.getTrackCount() - 1);
	var b = Math.random() * totalTracks;
	currentTrack = Math.round(b);
	CDPlayerPlay();
}

function ShowCDPlayerMenu()
{
	currentCDTrack = 0;
	beInCDPlayer = true;
	theControlPanelControlsInline.children[0].InitDropDown2();
	ShowCDPlayerSongMenu();

	theCDPlayerJoy.isBound = true;
}

function HideCDPlayerMenu()
{
	theControlPanelControlsInline.children[0].HideDropDown2();
	beInCDPlayer = false;

	theCDPlayerJoy.isBound = false;
	theMainMusicControlPanelJoy.isBound = true;
}

function ShowCDPlayerSongMenu()
{
    	TrCount = theDiscDrive.getTrackCount();
    	StName = TrCount + 1;
    	UpdateCDPlayerSongMenu();
}

function UpdateCDPlayerSongMenu()
{
	var c = theControlPanelInline.children[0];
	for(var i = 0; i < 9; i = i + 1)
	{
		var nslist = currentCDTrack + i;
		if (nslist >= TrCount) { c.theDropDown2Text.children[i].children[0].geometry.text = ""; }
		else
		{
			var str = "CD Track " + nslist;
			//var str = theMusicCollection.GetSoundtrackSongName(StNum, nslist);
			c.theDropDown2Text.children[i].children[0].geometry.text = str;
        		if (i == gcurMenuItem) { c.theDropDown2Text.children[i].children[0].appearance.material.name = "CellEgg/Partsz"; }
			                  else { c.theDropDown2Text.children[i].children[0].appearance.material.name = "NavType"; }
		}
	}
}

DEF theCDPlayerJoy Joystick
{
	function OnADown() { CDPlayerPlay(); }
	function OnBDown() { CDPlayerStop(); }
	function OnYDown() { HideCDPlayerMenu(); }

	function OnLeftThumbMoveUp()
	{
		if(currentCDTrack == 0) { return; }
		else
		{
			currentCDTrack = currentCDTrack - 1;
			UpdateCDPlayerSongMenu();
		}
	}

	function OnLeftThumbMoveDown()
	{
		var a = theDiscDrive.getTrackCount();
		if(currentCDTrack == a) { return; }
		else
		{
			currentCDTrack = currentCDTrack + 1;
			UpdateCDPlayerSongMenu();
		}
	}
}

/////////////////////////////////////////////////////////////////
function UpdateText()
{
    if (PlaylistActive)
    {
        theControlPanelInline.children[0].DropDownMenu1.children[11].children[0].children[0].appearance.material.name = "CellEgg/Partsz";
        theControlPanelInline.children[0].DropDownMenu2.children[11].children[0].children[0].appearance.material.name = "NavType";
    }
    else
    {
        theControlPanelInline.children[0].DropDownMenu1.children[11].children[0].children[0].appearance.material.name = "NavType";
        theControlPanelInline.children[0].DropDownMenu2.children[11].children[0].children[0].appearance.material.name = "CellEgg/Partsz";
    }
}
/////////////////////////////////////////////////////////////////
